{"version":3,"file":"prompts/adapter.js","sourceRoot":"../src","sources":["prompts/adapter.ts"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\n// This code is originally from https://github.com/DonJayamanne/bowerVSCode\n// License: https://github.com/DonJayamanne/bowerVSCode/blob/master/LICENSE\n\nimport {window, OutputChannel } from 'vscode';\nimport * as nodeUtil from 'util';\nimport PromptFactory from './factory';\nimport EscapeException from '../escapeException';\nimport { IQuestion, IPrompter, IPromptCallback } from './question';\n\n// Supports simple pattern for prompting for user input and acting on this\nexport default class CodeAdapter implements IPrompter {\n\n\tprivate outChannel: OutputChannel;\n\tprivate outBuffer: string = '';\n\tprivate messageLevelFormatters = {};\n\tconstructor() {\n\t\t// TODO Decide whether output channel logging should be saved here?\n\t\tthis.outChannel = window.createOutputChannel('test');\n\t\t// this.outChannel.clear();\n\t}\n\n\tpublic logError(message: any): void {\n\t\tlet line = `error: ${message.message}\\n    Code - ${message.code}`;\n\n\t\tthis.outBuffer += `${line}\\n`;\n\t\tthis.outChannel.appendLine(line);\n\t}\n\n\tprivate formatMessage(message: any): string {\n\t\tconst prefix = `${message.level}: (${message.id}) `;\n\t\treturn `${prefix}${message.message}`;\n\t}\n\n\tpublic clearLog(): void {\n\t\tthis.outChannel.clear();\n\t}\n\n\tpublic showLog(): void {\n\t\tthis.outChannel.show();\n\t}\n\n\t// TODO define question interface\n\tprivate fixQuestion(question: any): any {\n\t\tif (question.type === 'checkbox' && Array.isArray(question.choices)) {\n\t\t\t// For some reason when there's a choice of checkboxes, they aren't formatted properly\n\t\t\t// Not sure where the issue is\n\t\t\tquestion.choices = question.choices.map(item => {\n\t\t\t\tif (typeof (item) === 'string') {\n\t\t\t\t\treturn { checked: false, name: item, value: item };\n\t\t\t\t} else {\n\t\t\t\t\treturn item;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic promptSingle<T>(question: IQuestion, ignoreFocusOut?: boolean): Promise<T> {\n\t\tlet questions: IQuestion[] = [question];\n\t\treturn this.prompt(questions, ignoreFocusOut).then( (answers: {[key: string]: T})  => {\n\t\t\tif (answers) {\n\t\t\t\tlet response: T = answers[question.name];\n\t\t\t\treturn response || undefined;\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic prompt<T>(questions: IQuestion[], ignoreFocusOut?: boolean): Promise<{[key: string]: T}> {\n\t\tlet answers: {[key: string]: T} = {};\n\n\t\t// Collapse multiple questions into a set of prompt steps\n\t\tlet promptResult: Promise<{[key: string]: T}> = questions.reduce((promise: Promise<{[key: string]: T}>, question: IQuestion) => {\n\t\t\tthis.fixQuestion(question);\n\n\t\t\treturn promise.then(() => {\n\t\t\t\treturn PromptFactory.createPrompt(question, ignoreFocusOut);\n\t\t\t}).then(prompt => {\n\t\t\t\tif (!question.shouldPrompt || question.shouldPrompt(answers) === true) {\n\t\t\t\t\treturn prompt.render().then(result => {\n\t\t\t\t\t\tanswers[question.name] = result;\n\n\t\t\t\t\t\tif (question.onAnswered) {\n\t\t\t\t\t\t\tquestion.onAnswered(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn answers;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn answers;\n\t\t\t});\n\t\t}, Promise.resolve());\n\n\t\treturn promptResult.catch(err => {\n\t\t\tif (err instanceof EscapeException || err instanceof TypeError) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\twindow.showErrorMessage(err.message);\n\t\t});\n\t}\n\n\t// Helper to make it possible to prompt using callback pattern. Generally Promise is a preferred flow\n\tpublic promptCallback(questions: IQuestion[], callback: IPromptCallback): void {\n\t\t// Collapse multiple questions into a set of prompt steps\n\t\tthis.prompt(questions).then(answers => {\n\t\t\tif (callback) {\n\t\t\t\tcallback(answers);\n\t\t\t}\n\t\t});\n\t}\n}\n"]}