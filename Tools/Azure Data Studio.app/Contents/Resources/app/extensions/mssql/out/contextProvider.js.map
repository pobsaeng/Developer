{"version":3,"file":"contextProvider.js","sourceRoot":"../src","sources":["contextProvider.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as vscode from 'vscode';\nimport * as sqlops from 'sqlops';\n\nimport * as types from './types';\nimport * as Constants from './constants';\n\nexport enum BuiltInCommands {\n\tSetContext = 'setContext',\n}\n\nexport enum ContextKeys {\n\tISCLOUD = 'mssql:iscloud',\n\tEDITIONID = 'mssql:engineedition',\n\tISCLUSTER = 'mssql:iscluster',\n\tSERVERMAJORVERSION = 'mssql:servermajorversion'\n}\n\nconst isCloudEditions = [\n\t5,\n\t6\n];\n\nexport function setCommandContext(key: ContextKeys | string, value: any) {\n\treturn vscode.commands.executeCommand(BuiltInCommands.SetContext, key, value);\n}\n\nexport default class ContextProvider {\n\tprivate _disposables = new Array<vscode.Disposable>();\n\n\tconstructor() {\n\t\tthis._disposables.push(sqlops.workspace.onDidOpenDashboard(this.onDashboardOpen, this));\n\t\tthis._disposables.push(sqlops.workspace.onDidChangeToDashboard(this.onDashboardOpen, this));\n\t}\n\n\tpublic onDashboardOpen(e: sqlops.DashboardDocument): void {\n\t\tlet iscloud: boolean;\n\t\tlet edition: number;\n\t\tlet isCluster: boolean = false;\n\t\tlet serverMajorVersion: number;\n\t\tif (e.profile.providerName.toLowerCase() === 'mssql' && !types.isUndefinedOrNull(e.serverInfo) && !types.isUndefinedOrNull(e.serverInfo.engineEditionId)) {\n\t\t\tif (isCloudEditions.some(i => i === e.serverInfo.engineEditionId)) {\n\t\t\t\tiscloud = true;\n\t\t\t} else {\n\t\t\t\tiscloud = false;\n\t\t\t}\n\n\t\t\tedition = e.serverInfo.engineEditionId;\n\n\t\t\tif (!types.isUndefinedOrNull(e.serverInfo.options)) {\n\t\t\t\tlet isBigDataCluster = e.serverInfo.options[Constants.isBigDataClusterProperty];\n\t\t\t\tif (isBigDataCluster) {\n\t\t\t\t\tisCluster = isBigDataCluster;\n\t\t\t\t}\n\t\t\t}\n\t\t\tserverMajorVersion = e.serverInfo.serverMajorVersion;\n\t\t}\n\n\t\tif (iscloud === true || iscloud === false) {\n\t\t\tsetCommandContext(ContextKeys.ISCLOUD, iscloud);\n\t\t}\n\n\t\tif (!types.isUndefinedOrNull(edition)) {\n\t\t\tsetCommandContext(ContextKeys.EDITIONID, edition);\n\t\t}\n\n\t\tif (!types.isUndefinedOrNull(isCluster)) {\n\t\t\tsetCommandContext(ContextKeys.ISCLUSTER, isCluster);\n\t\t}\n\n\t\tif (!types.isUndefinedOrNull(serverMajorVersion)) {\n\t\t\tsetCommandContext(ContextKeys.SERVERMAJORVERSION, serverMajorVersion);\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis._disposables = this._disposables.map(i => i.dispose());\n\t}\n}\n"]}