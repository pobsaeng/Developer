{"version":3,"file":"resourceProvider/resourceProvider.js","sourceRoot":"../src","sources":["resourceProvider/resourceProvider.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as sqlops from 'sqlops';\nimport { IConfig, ServerProvider } from 'service-downloader';\nimport { SqlOpsDataClient, SqlOpsFeature, ClientOptions } from 'dataprotocol-client';\nimport { ServerCapabilities, ClientCapabilities, RPCMessageType, ServerOptions, TransportKind } from 'vscode-languageclient';\nimport * as UUID from 'vscode-languageclient/lib/utils/uuid';\nimport { Disposable } from 'vscode';\nimport { CreateFirewallRuleRequest, HandleFirewallRuleRequest, CreateFirewallRuleParams, HandleFirewallRuleParams } from './contracts';\nimport * as Constants from './constants';\nimport * as Utils from '../utils';\n\nclass FireWallFeature extends SqlOpsFeature<any> {\n\n\tprivate static readonly messagesTypes: RPCMessageType[] = [\n\t\tCreateFirewallRuleRequest.type,\n\t\tHandleFirewallRuleRequest.type\n\t];\n\n\tconstructor(client: SqlOpsDataClient) {\n\t\tsuper(client, FireWallFeature.messagesTypes);\n\t}\n\n\tfillClientCapabilities(capabilities: ClientCapabilities): void {\n\t\tUtils.ensure(Utils.ensure(capabilities, 'firewall')!, 'firwall')!.dynamicRegistration = true;\n\t}\n\n\tinitialize(capabilities: ServerCapabilities): void {\n\t\tthis.register(this.messages, {\n\t\t\tid: UUID.generateUuid(),\n\t\t\tregisterOptions: undefined\n\t\t});\n\t}\n\n\tprotected registerProvider(options: any): Disposable {\n\t\tconst client = this._client;\n\n\t\tlet createFirewallRule = (account: sqlops.Account, firewallruleInfo: sqlops.FirewallRuleInfo): Thenable<sqlops.CreateFirewallRuleResponse> => {\n\t\t\treturn client.sendRequest(CreateFirewallRuleRequest.type, asCreateFirewallRuleParams(account, firewallruleInfo));\n\t\t};\n\n\t\tlet handleFirewallRule = (errorCode: number, errorMessage: string, connectionTypeId: string): Thenable<sqlops.HandleFirewallRuleResponse> => {\n\t\t\tlet params: HandleFirewallRuleParams = { errorCode: errorCode, errorMessage: errorMessage, connectionTypeId: connectionTypeId };\n\t\t\treturn client.sendRequest(HandleFirewallRuleRequest.type, params);\n\t\t};\n\n\t\treturn sqlops.resources.registerResourceProvider({\n\t\t\tdisplayName: 'Azure SQL Resource Provider', // TODO Localize\n\t\t\tid: 'Microsoft.Azure.SQL.ResourceProvider',\n\t\t\tsettings: {\n\n\t\t\t}\n\t\t}, {\n\t\t\t\thandleFirewallRule,\n\t\t\t\tcreateFirewallRule\n\t\t\t});\n\t}\n}\n\nfunction asCreateFirewallRuleParams(account: sqlops.Account, params: sqlops.FirewallRuleInfo): CreateFirewallRuleParams {\n\treturn {\n\t\taccount: account,\n\t\tserverName: params.serverName,\n\t\tstartIpAddress: params.startIpAddress,\n\t\tendIpAddress: params.endIpAddress,\n\t\tsecurityTokenMappings: params.securityTokenMappings\n\t};\n}\n\nexport class AzureResourceProvider {\n\tprivate _client: SqlOpsDataClient;\n\tprivate _config: IConfig;\n\n\tconstructor(baseConfig: IConfig) {\n\t\tif (baseConfig) {\n\t\t\tthis._config = JSON.parse(JSON.stringify(baseConfig));\n\t\t\tthis._config.executableFiles = ['SqlToolsResourceProviderService.exe', 'SqlToolsResourceProviderService'];\n\t\t}\n\t}\n\n\tpublic start() {\n\t\tlet serverdownloader = new ServerProvider(this._config);\n\t\tlet clientOptions: ClientOptions = {\n\t\t\tproviderId: Constants.providerId,\n\t\t\tfeatures: [FireWallFeature]\n\t\t};\n\t\tserverdownloader.getOrDownloadServer().then(e => {\n\t\t\tlet serverOptions = this.generateServerOptions(e);\n\t\t\tthis._client = new SqlOpsDataClient(Constants.serviceName, serverOptions, clientOptions);\n\t\t\tthis._client.start();\n\t\t});\n\t}\n\n\tpublic dispose() {\n\t\tif (this._client) {\n\t\t\tthis._client.stop();\n\t\t}\n\t}\n\n\tprivate generateServerOptions(executablePath: string): ServerOptions {\n\t\tlet launchArgs = Utils.getCommonLaunchArgsAndCleanupOldLogFiles('resourceprovider', executablePath);\n\t\treturn { command: executablePath, args: launchArgs, transport: TransportKind.stdio };\n\t}\n}\n"]}