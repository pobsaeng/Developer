{"version":3,"file":"prompts/question.js","sourceRoot":"../src","sources":["prompts/question.ts"],"names":[],"mappings":"AACA,YAAY,CAAC;;AAIb;IACQ,MAAM,KAAK,KAAK,KAAa,OAAO,OAAO,CAAC,CAAC,CAAC;IAC9C,MAAM,KAAK,QAAQ,KAAa,OAAO,UAAU,CAAC,CAAC,CAAC;IACpD,MAAM,KAAK,IAAI,KAAa,OAAO,MAAM,CAAC,CAAC,CAAC;IAC5C,MAAM,KAAK,OAAO,KAAa,OAAO,SAAS,CAAC,CAAC,CAAC;IAClD,MAAM,KAAK,QAAQ,KAAa,OAAO,UAAU,CAAC,CAAC,CAAC;IACpD,MAAM,KAAK,MAAM,KAAa,OAAO,QAAQ,CAAC,CAAC,CAAC;CACvD;AAPD,sCAOC","sourcesContent":["\n'use strict';\n\nimport vscode = require('vscode');\n\nexport class QuestionTypes {\n\tpublic static get input(): string { return 'input'; }\n\tpublic static get password(): string { return 'password'; }\n\tpublic static get list(): string { return 'list'; }\n\tpublic static get confirm(): string { return 'confirm'; }\n\tpublic static get checkbox(): string { return 'checkbox'; }\n\tpublic static get expand(): string { return 'expand'; }\n}\n\n// Question interface to clarify how to use the prompt feature\n// based on Bower Question format: https://github.com/bower/bower/blob/89069784bb46bfd6639b4a75e98a0d7399a8c2cb/packages/bower-logger/README.md\nexport interface IQuestion {\n\t// Type of question (see QuestionTypes)\n\ttype: string;\n\t// Name of the question for disambiguation\n\tname: string;\n\t// Message to display to the user\n\tmessage: string;\n\t// Optional placeHolder to give more detailed information to the user\n\tplaceHolder?: any;\n\t// Optional default value - this will be used instead of placeHolder\n\tdefault?: any;\n\t// optional set of choices to be used. Can be QuickPickItems or a simple name-value pair\n\tchoices?: Array<vscode.QuickPickItem | INameValueChoice>;\n\t// Optional validation function that returns an error string if validation fails\n\tvalidate?: (value: any) => string;\n\t// Optional pre-prompt function. Takes in set of answers so far, and returns true if prompt should occur\n\tshouldPrompt?: (answers: { [id: string]: any }) => boolean;\n\t// Optional action to take on the question being answered\n\tonAnswered?: (value: any) => void;\n\t// Optional set of options to support matching choices.\n\tmatchOptions?: vscode.QuickPickOptions;\n}\n\n// Pair used to display simple choices to the user\nexport interface INameValueChoice {\n\tname: string;\n\tvalue: any;\n}\n\n// Generic object that can be used to define a set of questions and handle the result\nexport interface IQuestionHandler {\n\t// Set of questions to be answered\n\tquestions: IQuestion[];\n\t// Optional callback, since questions may handle themselves\n\tcallback?: IPromptCallback;\n}\n\nexport interface IPrompter {\n\tpromptSingle<T>(question: IQuestion, ignoreFocusOut?: boolean): Promise<T>;\n\t/**\n\t * Prompts for multiple questions\n\t *\n\t * @returns {[questionId: string]: T} Map of question IDs to results, or undefined if\n\t * the user canceled the question session\n\t */\n\tprompt<T>(questions: IQuestion[], ignoreFocusOut?: boolean): Promise<{ [questionId: string]: any }>;\n\tpromptCallback(questions: IQuestion[], callback: IPromptCallback): void;\n}\n\nexport interface IPromptCallback {\n\t(answers: { [id: string]: any }): void;\n}\n"]}