{"version":3,"file":"objectExplorerNodeProvider/treeNodes.js","sourceRoot":"../src","sources":["objectExplorerNodeProvider/treeNodes.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,YAAY,CAAC;;;;;;;;;;AAQb;IAAA;QACS,YAAO,GAAa,SAAS,CAAC;IA+DvC,CAAC;IA7DA,IAAW,MAAM;QAChB,OAAO,IAAI,CAAC,OAAO,CAAC;IACrB,CAAC;IAED,IAAW,MAAM,CAAC,IAAc;QAC/B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;IACrB,CAAC;IAEM,gBAAgB;QACtB,IAAI,IAAI,GAAG,SAAS,CAAC;QACrB,IAAI,IAAI,CAAC,MAAM,EAAE;YAChB,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC;SACtC;QACD,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;QACnE,OAAO,IAAI,CAAC;IACb,CAAC;IAEM,cAAc,CAAC,IAAY,EAAE,iBAA0B,KAAK;QAClE,IAAI,SAAS,GAAsB,CAAC,IAAc,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,KAAK,IAAI,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC5I,IAAI,MAAM,GAAsB,CAAC,IAAc,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,CAAC;QACjG,OAAO,QAAQ,CAAC,QAAQ,CAAC,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;IACzD,CAAC;IAEM,MAAM,CAAO,QAAQ,CAAC,IAAc,EAAE,SAA4B,EAAE,MAAyB,EAAE,cAAuB;;YAC5H,IAAI,CAAC,IAAI,EAAE;gBACV,OAAO,SAAS,CAAC;aACjB;YAED,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE;gBACpB,OAAO,IAAI,CAAC;aACZ;YAED,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YAClC,IAAI,QAAQ,CAAC,MAAM,EAAE;gBACpB,OAAO,SAAS,CAAC;aACjB;YAED,sEAAsE;YACtE,IAAI,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAC7C,IAAI,QAAQ,EAAE;gBACb,KAAK,IAAI,KAAK,IAAI,QAAQ,EAAE;oBAC3B,IAAI,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE;wBAC5B,IAAI,SAAS,GAAI,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE,cAAc,CAAC,CAAC;wBAC/E,IAAI,SAAS,EAAE;4BACd,OAAO,SAAS,CAAC;yBACjB;qBACD;iBACD;aACD;YACD,OAAO,SAAS,CAAC;QAClB,CAAC;KAAA;CAWD;AAhED,4BAgEC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport * as sqlops from 'sqlops';\nimport * as vscode from 'vscode';\nimport { ITreeNode } from './types';\n\ntype TreeNodePredicate = (node: TreeNode) => boolean;\n\nexport abstract class TreeNode implements ITreeNode {\n\tprivate _parent: TreeNode = undefined;\n\n\tpublic get parent(): TreeNode {\n\t\treturn this._parent;\n\t}\n\n\tpublic set parent(node: TreeNode) {\n\t\tthis._parent = node;\n\t}\n\n\tpublic generateNodePath(): string {\n\t\tlet path = undefined;\n\t\tif (this.parent) {\n\t\t\tpath = this.parent.generateNodePath();\n\t\t}\n\t\tpath = path ? `${path}/${this.nodePathValue}` : this.nodePathValue;\n\t\treturn path;\n\t}\n\n\tpublic findNodeByPath(path: string, expandIfNeeded: boolean = false): Promise<TreeNode> {\n\t\tlet condition: TreeNodePredicate = (node: TreeNode) => node.getNodeInfo().nodePath === path || node.getNodeInfo().nodePath.startsWith(path);\n\t\tlet filter: TreeNodePredicate = (node: TreeNode) => path.startsWith(node.getNodeInfo().nodePath);\n\t\treturn TreeNode.findNode(this, condition, filter, true);\n\t}\n\n\tpublic static async findNode(node: TreeNode, condition: TreeNodePredicate, filter: TreeNodePredicate, expandIfNeeded: boolean): Promise<TreeNode> {\n\t\tif (!node) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (condition(node)) {\n\t\t\treturn node;\n\t\t}\n\n\t\tlet nodeInfo = node.getNodeInfo();\n\t\tif (nodeInfo.isLeaf) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// TODO #3813 support filtering by already expanded / not yet expanded\n\t\tlet children = await node.getChildren(false);\n\t\tif (children) {\n\t\t\tfor (let child of children) {\n\t\t\t\tif (filter && filter(child)) {\n\t\t\t\t\tlet childNode =  await this.findNode(child, condition, filter, expandIfNeeded);\n\t\t\t\t\tif (childNode) {\n\t\t\t\t\t\treturn childNode;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * The value to use for this node in the node path\n\t */\n\tpublic abstract get nodePathValue(): string;\n\n\tabstract getChildren(refreshChildren: boolean): TreeNode[] | Promise<TreeNode[]>;\n\tabstract getTreeItem(): vscode.TreeItem | Promise<vscode.TreeItem>;\n\n\tabstract getNodeInfo(): sqlops.NodeInfo;\n}\n"]}