{"version":3,"file":"credentialstore/credentialstore.js","sourceRoot":"../src","sources":["credentialstore/credentialstore.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { SqlOpsDataClient, ClientOptions, SqlOpsFeature } from 'dataprotocol-client';\nimport * as path from 'path';\nimport { IConfig, ServerProvider } from 'service-downloader';\nimport { ServerOptions, RPCMessageType, ClientCapabilities, ServerCapabilities, TransportKind } from 'vscode-languageclient';\nimport { Disposable } from 'vscode';\nimport * as UUID from 'vscode-languageclient/lib/utils/uuid';\nimport * as sqlops from 'sqlops';\n\nimport * as Contracts from './contracts';\nimport * as Constants from './constants';\nimport * as Utils from '../utils';\n\nclass CredentialsFeature extends SqlOpsFeature<any> {\n\n\tprivate static readonly messagesTypes: RPCMessageType[] = [\n\t\tContracts.DeleteCredentialRequest.type,\n\t\tContracts.SaveCredentialRequest.type,\n\t\tContracts.ReadCredentialRequest.type\n\t];\n\n\tconstructor(client: SqlOpsDataClient) {\n\t\tsuper(client, CredentialsFeature.messagesTypes);\n\t}\n\n\tfillClientCapabilities(capabilities: ClientCapabilities): void {\n\t\tUtils.ensure(Utils.ensure(capabilities, 'credentials')!, 'credentials')!.dynamicRegistration = true;\n\t}\n\n\tinitialize(capabilities: ServerCapabilities): void {\n\t\tthis.register(this.messages, {\n\t\t\tid: UUID.generateUuid(),\n\t\t\tregisterOptions: undefined\n\t\t});\n\t}\n\n\tprotected registerProvider(options: any): Disposable {\n\t\tconst client = this._client;\n\n\t\tlet readCredential = (credentialId: string): Thenable<sqlops.Credential> => {\n\t\t\treturn client.sendRequest(Contracts.ReadCredentialRequest.type, { credentialId });\n\t\t};\n\n\t\tlet saveCredential = (credentialId: string, password: string): Thenable<boolean> => {\n\t\t\treturn client.sendRequest(Contracts.SaveCredentialRequest.type, { credentialId, password });\n\t\t};\n\n\t\tlet deleteCredential = (credentialId: string): Thenable<boolean> => {\n\t\t\treturn client.sendRequest(Contracts.DeleteCredentialRequest.type, { credentialId });\n\t\t};\n\n\t\treturn sqlops.credentials.registerProvider({\n\t\t\tdeleteCredential,\n\t\t\treadCredential,\n\t\t\tsaveCredential,\n\t\t\thandle: 0\n\t\t});\n\t}\n}\n\n/**\n * Implements a credential storage for Windows, Mac (darwin), or Linux.\n *\n * Allows a single credential to be stored per service (that is, one username per service);\n */\nexport class CredentialStore {\n\tprivate _client: SqlOpsDataClient;\n\tprivate _config: IConfig;\n\n\tconstructor(baseConfig: IConfig) {\n\t\tif (baseConfig) {\n\t\t\tthis._config = JSON.parse(JSON.stringify(baseConfig));\n\t\t\tthis._config.executableFiles = ['MicrosoftSqlToolsCredentials.exe', 'MicrosoftSqlToolsCredentials'];\n\t\t}\n\t}\n\n\tpublic start() {\n\t\tlet serverdownloader = new ServerProvider(this._config);\n\t\tlet clientOptions: ClientOptions = {\n\t\t\tproviderId: Constants.providerId,\n\t\t\tfeatures: [CredentialsFeature]\n\t\t};\n\t\tserverdownloader.getOrDownloadServer().then(e => {\n\t\t\tlet serverOptions = this.generateServerOptions(e);\n\t\t\tthis._client = new SqlOpsDataClient(Constants.serviceName, serverOptions, clientOptions);\n\t\t\tthis._client.start();\n\t\t});\n\t}\n\n\tdispose() {\n\t\tif (this._client) {\n\t\t\tthis._client.stop();\n\t\t}\n\t}\n\n\tprivate generateServerOptions(executablePath: string): ServerOptions {\n\t\tlet launchArgs = Utils.getCommonLaunchArgsAndCleanupOldLogFiles('credentialstore', executablePath);\n\t\treturn { command: executablePath, args: launchArgs, transport: TransportKind.stdio };\n\t}\n}\n"]}