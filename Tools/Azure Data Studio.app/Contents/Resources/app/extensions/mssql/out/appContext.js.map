{"version":3,"file":"appContext.js","sourceRoot":"../src","sources":["appContext.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,YAAY,CAAC;;AAGb,6CAA0C;AAE1C;;GAEG;AACH;IAGC,YAA4B,gBAAyC,EAAkB,UAAsB;QAAjF,qBAAgB,GAAhB,gBAAgB,CAAyB;QAAkB,eAAU,GAAV,UAAU,CAAY;QADrG,eAAU,GAAqB,IAAI,GAAG,EAAE,CAAC;QAEhD,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,IAAI,uBAAU,EAAE,CAAC;IAClD,CAAC;IAEM,UAAU,CAAI,WAAmB;QACvC,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,WAAW,CAAM,CAAC;IAC9C,CAAC;IAEM,eAAe,CAAI,WAAmB,EAAE,OAAU;QACxD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC;CACD;AAdD,gCAcC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport * as vscode from 'vscode';\nimport { ApiWrapper } from './apiWrapper';\n\n/**\n * Global context for the application\n */\nexport class AppContext {\n\n\tprivate serviceMap: Map<string, any> = new Map();\n\tconstructor(public readonly extensionContext: vscode.ExtensionContext, public readonly apiWrapper: ApiWrapper) {\n\t\tthis.apiWrapper = apiWrapper || new ApiWrapper();\n\t}\n\n\tpublic getService<T>(serviceName: string): T {\n\t\treturn this.serviceMap.get(serviceName) as T;\n\t}\n\n\tpublic registerService<T>(serviceName: string, service: T): void {\n\t\tthis.serviceMap.set(serviceName, service);\n\t}\n}\n"]}