{"version":3,"file":"sparkFeature/historyTask.js","sourceRoot":"../src","sources":["sparkFeature/historyTask.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,YAAY,CAAC;;;;;;;;;;AAGb,iCAAiC;AAEjC,oCAA2C;AAC3C,wDAAwD;AAExD;IACC,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAC1C,CAAC;IAEK,OAAO,CAAC,cAAyC,EAAE,OAAgB;;YACxE,IAAI;gBACH,IAAI,oBAAoB,GAAG,gBAAgB,CAAC,wBAAwB,CAAC,cAAc,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;gBACtG,IAAI,CAAC,oBAAoB,EACzB;oBACC,IAAI,IAAI,GAAG,OAAO,CAAA,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC;oBACrC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,gBAAgB,CAAC,mDAAmD,IAAI,WAAW,CAAC,CAAC;oBAChH,OAAO;iBACP;gBACD,IAAI,OAAO,EAAE;oBACZ,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,aAAa,EAAE,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,uBAAuB,CAAC,oBAAoB,CAAC,IAAI,EAAE,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACpJ;qBACI;oBACJ,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,aAAa,EAAE,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,sBAAsB,CAAC,oBAAoB,CAAC,IAAI,EAAE,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACnJ;aACD;YAAC,OAAO,KAAK,EAAE;gBACf,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,gBAAgB,CAAC,uBAAe,CAAC,KAAK,CAAC,CAAC,CAAC;aACpE;QACF,CAAC;KAAA;IAEO,uBAAuB,CAAC,IAAY,EAAE,IAAY;QACzD,OAAO,WAAW,IAAI,IAAI,IAAI,gCAAgC,CAAC;IAChE,CAAC;IAEO,sBAAsB,CAAC,IAAY,EAAE,IAAY;QACxD,OAAO,WAAW,IAAI,IAAI,IAAI,oCAAoC,CAAC;IACpE,CAAC;CACD;AA/BD,4DA+BC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport * as sqlops from 'sqlops';\nimport * as vscode from 'vscode';\nimport { AppContext } from '../appContext';\nimport { getErrorMessage } from '../utils';\nimport * as SqlClusterLookUp from '../sqlClusterLookUp';\n\nexport class OpenSparkYarnHistoryTask {\n\tconstructor(private appContext: AppContext) {\n\t}\n\n\tasync execute(sqlConnProfile: sqlops.IConnectionProfile, isSpark: boolean): Promise<void> {\n\t\ttry {\n\t\t\tlet sqlClusterConnection = SqlClusterLookUp.findSqlClusterConnection(sqlConnProfile, this.appContext);\n\t\t\tif (!sqlClusterConnection)\n\t\t\t{\n\t\t\t\tlet name = isSpark? 'Spark' : 'Yarn';\n\t\t\t\tthis.appContext.apiWrapper.showErrorMessage(`Please connect to the Spark cluster before View ${name} History.`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (isSpark) {\n\t\t\t\tvscode.commands.executeCommand('vscode.open', vscode.Uri.parse(this.generateSparkHistoryUrl(sqlClusterConnection.host, sqlClusterConnection.port)));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvscode.commands.executeCommand('vscode.open', vscode.Uri.parse(this.generateYarnHistoryUrl(sqlClusterConnection.host, sqlClusterConnection.port)));\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.appContext.apiWrapper.showErrorMessage(getErrorMessage(error));\n\t\t}\n\t}\n\n\tprivate generateSparkHistoryUrl(host: string, port: string): string {\n\t\treturn `https://${host}:${port}/gateway/default/sparkhistory/`;\n\t}\n\n\tprivate generateYarnHistoryUrl(host: string, port: string): string {\n\t\treturn `https://${host}:${port}/gateway/default/yarn/cluster/apps`;\n\t}\n}\n"]}