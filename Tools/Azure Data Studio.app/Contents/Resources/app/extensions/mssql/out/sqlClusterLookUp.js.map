{"version":3,"file":"sqlClusterLookUp.js","sourceRoot":"../src","sources":["sqlClusterLookUp.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport * as sqlops from 'sqlops';\nimport * as constants from './constants';\nimport * as UUID from 'vscode-languageclient/lib/utils/uuid';\nimport { AppContext } from './appContext';\nimport { SqlClusterConnection } from './objectExplorerNodeProvider/connection';\nimport { ICommandObjectExplorerContext } from './objectExplorerNodeProvider/command';\nimport { MssqlObjectExplorerNodeProvider } from './objectExplorerNodeProvider/objectExplorerNodeProvider';\n\n\nexport function findSqlClusterConnection(\n\tobj: ICommandObjectExplorerContext | sqlops.IConnectionProfile,\n\tappContext: AppContext) : SqlClusterConnection  {\n\n\tif (!obj || !appContext) { return undefined; }\n\n\tlet sqlConnProfile: sqlops.IConnectionProfile;\n\tif ('type' in obj && obj.type === constants.ObjectExplorerService\n\t\t&& 'explorerContext' in obj && obj.explorerContext && obj.explorerContext.connectionProfile) {\n\t\tsqlConnProfile = obj.explorerContext.connectionProfile;\n\t} else if ('options' in obj) {\n\t\tsqlConnProfile = obj;\n\t}\n\n\tlet sqlClusterConnection: SqlClusterConnection = undefined;\n\tif (sqlConnProfile) {\n\t\tsqlClusterConnection = findSqlClusterConnectionBySqlConnProfile(sqlConnProfile, appContext);\n\t}\n\treturn sqlClusterConnection;\n}\n\nfunction findSqlClusterConnectionBySqlConnProfile(sqlConnProfile: sqlops.IConnectionProfile, appContext: AppContext): SqlClusterConnection {\n\tif (!sqlConnProfile || !appContext) { return undefined; }\n\n\tlet sqlOeNodeProvider = appContext.getService<MssqlObjectExplorerNodeProvider>(constants.ObjectExplorerService);\n\tif (!sqlOeNodeProvider) { return undefined; }\n\n\tlet sqlClusterSession = sqlOeNodeProvider.findSqlClusterSessionBySqlConnProfile(sqlConnProfile);\n\tif (!sqlClusterSession) { return undefined; }\n\n\treturn  sqlClusterSession.sqlClusterConnection;\n}\n\nexport async function getSqlClusterConnection(\n\tobj: sqlops.IConnectionProfile | sqlops.connection.Connection | ICommandObjectExplorerContext): Promise<ConnectionParam> {\n\n\tif (!obj) { return undefined; }\n\n\tlet sqlClusterConnInfo: ConnectionParam = undefined;\n\tif ('providerName' in obj) {\n\t\tif (obj.providerName === constants.mssqlClusterProviderName) {\n\t\t\tsqlClusterConnInfo = 'id' in obj ? connProfileToConnectionParam(obj) : connToConnectionParam(obj);\n\t\t} else {\n\t\t\tsqlClusterConnInfo = await createSqlClusterConnInfo(obj);\n\t\t}\n\t} else {\n\t\tsqlClusterConnInfo = await createSqlClusterConnInfo(obj.explorerContext.connectionProfile);\n\t}\n\n\treturn sqlClusterConnInfo;\n}\n\nasync function createSqlClusterConnInfo(sqlConnInfo: sqlops.IConnectionProfile | sqlops.connection.Connection): Promise<ConnectionParam> {\n\tif (!sqlConnInfo) { return undefined; }\n\n\tlet connectionId: string = 'id' in sqlConnInfo ? sqlConnInfo.id : sqlConnInfo.connectionId;\n\tif (!connectionId) { return undefined; }\n\n\tlet serverInfo = await sqlops.connection.getServerInfo(connectionId);\n\tif (!serverInfo || !serverInfo.options) { return undefined; }\n\n\tlet endpoints: IEndpoint[] = serverInfo.options[constants.clusterEndpointsProperty];\n\tif (!endpoints || endpoints.length === 0) { return undefined; }\n\n\tlet index = endpoints.findIndex(ep => ep.serviceName === constants.hadoopKnoxEndpointName);\n\tif (index < 0) { return undefined; }\n\n\tlet credentials = await sqlops.connection.getCredentials(connectionId);\n\tif (!credentials) { return undefined; }\n\n\tlet clusterConnInfo = <ConnectionParam>{\n\t\tproviderName: constants.mssqlClusterProviderName,\n\t\tconnectionId: UUID.generateUuid(),\n\t\toptions: {}\n\t};\n\n\tclusterConnInfo.options[constants.hostPropName] = endpoints[index].ipAddress;\n\tclusterConnInfo.options[constants.knoxPortPropName] = endpoints[index].port;\n\tclusterConnInfo.options[constants.userPropName] = 'root'; //should be the same user as sql master\n\tclusterConnInfo.options[constants.passwordPropName] = credentials.password;\n\tclusterConnInfo = connToConnectionParam(clusterConnInfo);\n\n\treturn clusterConnInfo;\n}\n\nfunction connProfileToConnectionParam(connectionProfile: sqlops.IConnectionProfile): ConnectionParam {\n\tlet result = Object.assign(connectionProfile, { connectionId: connectionProfile.id });\n\treturn <ConnectionParam>result;\n}\n\nfunction connToConnectionParam(connection: sqlops.connection.Connection): ConnectionParam {\n\tlet connectionId = connection.connectionId;\n\tlet options = connection.options;\n\tlet result = Object.assign(connection,\n\t\t{\n\t\t\tserverName: `${options[constants.hostPropName]},${options[constants.knoxPortPropName]}`,\n\t\t\tuserName: options[constants.userPropName],\n\t\t\tpassword: options[constants.passwordPropName],\n\t\t\tid: connectionId,\n\t\t}\n\t);\n\treturn <ConnectionParam>result;\n}\n\ninterface IEndpoint {\n\tserviceName: string;\n\tipAddress: string;\n\tport: number;\n}\n\nclass ConnectionParam implements sqlops.connection.Connection, sqlops.IConnectionProfile, sqlops.ConnectionInfo\n{\n\tpublic connectionName: string;\n\tpublic serverName: string;\n\tpublic databaseName: string;\n\tpublic userName: string;\n\tpublic password: string;\n\tpublic authenticationType: string;\n\tpublic savePassword: boolean;\n\tpublic groupFullName: string;\n\tpublic groupId: string;\n\tpublic saveProfile: boolean;\n\tpublic id: string;\n\tpublic azureTenantId?: string;\n\n\tpublic providerName: string;\n\tpublic connectionId: string;\n\n\tpublic options: { [name: string]: any; };\n}"]}