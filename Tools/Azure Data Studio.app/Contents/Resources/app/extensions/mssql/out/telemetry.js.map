{"version":3,"file":"telemetry.js","sourceRoot":"../src","sources":["telemetry.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\nimport * as vscode from 'vscode';\nimport * as opener from 'opener';\nimport TelemetryReporter from 'vscode-extension-telemetry';\nimport { PlatformInformation } from 'service-downloader/out/platform';\nimport { ErrorAction, ErrorHandler, Message, CloseAction } from 'vscode-languageclient';\n\nimport * as Utils from './utils';\nimport * as Constants from './constants';\n\nconst packageJson = require('../package.json');\n\nexport interface ITelemetryEventProperties {\n\t[key: string]: string;\n}\n\nexport interface ITelemetryEventMeasures {\n\t[key: string]: number;\n}\n\n/**\n * Filters error paths to only include source files. Exported to support testing\n */\nexport function FilterErrorPath(line: string): string {\n\tif (line) {\n\t\tlet values: string[] = line.split('/out/');\n\t\tif (values.length <= 1) {\n\t\t\t// Didn't match expected format\n\t\t\treturn line;\n\t\t} else {\n\t\t\treturn values[1];\n\t\t}\n\t}\n}\n\nexport class Telemetry {\n\tprivate static reporter: TelemetryReporter;\n\tprivate static userId: string;\n\tprivate static platformInformation: PlatformInformation;\n\tprivate static disabled: boolean;\n\n\tpublic static getPlatformInformation(): Promise<PlatformInformation> {\n\t\tif (this.platformInformation) {\n\t\t\treturn Promise.resolve(this.platformInformation);\n\t\t} else {\n\t\t\treturn new Promise<PlatformInformation>(resolve => {\n\t\t\t\tPlatformInformation.getCurrent().then(info => {\n\t\t\t\t\tthis.platformInformation = info;\n\t\t\t\t\tresolve(this.platformInformation);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Disable telemetry reporting\n\t */\n\tpublic static disable(): void {\n\t\tthis.disabled = true;\n\t}\n\n\t/**\n\t * Initialize the telemetry reporter for use.\n\t */\n\tpublic static initialize(): void {\n\t\tif (typeof this.reporter === 'undefined') {\n\t\t\t// Check if the user has opted out of telemetry\n\t\t\tif (!vscode.workspace.getConfiguration('telemetry').get<boolean>('enableTelemetry', true)) {\n\t\t\t\tthis.disable();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet packageInfo = Utils.getPackageInfo(packageJson);\n\t\t\tthis.reporter = new TelemetryReporter(packageInfo.name, packageInfo.version, packageInfo.aiKey);\n\t\t}\n\t}\n\n\t/**\n\t * Send a telemetry event for an exception\n\t */\n\tpublic static sendTelemetryEventForException(\n\t\terr: any, methodName: string, extensionConfigName: string): void {\n\t\ttry {\n\t\t\tlet stackArray: string[];\n\t\t\tlet firstLine: string = '';\n\t\t\tif (err !== undefined && err.stack !== undefined) {\n\t\t\t\tstackArray = err.stack.split('\\n');\n\t\t\t\tif (stackArray !== undefined && stackArray.length >= 2) {\n\t\t\t\t\tfirstLine = stackArray[1]; // The fist line is the error message and we don't want to send that telemetry event\n\t\t\t\t\tfirstLine = FilterErrorPath(firstLine);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Only adding the method name and the fist line of the stack trace. We don't add the error message because it might have PII\n\t\t\tthis.sendTelemetryEvent('Exception', { methodName: methodName, errorLine: firstLine });\n\t\t\t// Utils.logDebug('Unhandled Exception occurred. error: ' + err + ' method: ' + methodName, extensionConfigName);\n\t\t} catch (telemetryErr) {\n\t\t\t// If sending telemetry event fails ignore it so it won't break the extension\n\t\t\t// Utils.logDebug('Failed to send telemetry event. error: ' + telemetryErr, extensionConfigName);\n\t\t}\n\t}\n\n\t/**\n\t * Send a telemetry event using application insights\n\t */\n\tpublic static sendTelemetryEvent(\n\t\teventName: string,\n\t\tproperties?: ITelemetryEventProperties,\n\t\tmeasures?: ITelemetryEventMeasures): void {\n\n\t\tif (typeof this.disabled === 'undefined') {\n\t\t\tthis.disabled = false;\n\t\t}\n\n\t\tif (this.disabled || typeof (this.reporter) === 'undefined') {\n\t\t\t// Don't do anything if telemetry is disabled\n\t\t\treturn;\n\t\t}\n\n\t\tif (!properties || typeof properties === 'undefined') {\n\t\t\tproperties = {};\n\t\t}\n\n\t\t// Augment the properties structure with additional common properties before sending\n\t\tPromise.all([this.getPlatformInformation()]).then(() => {\n\t\t\tproperties['distribution'] = (this.platformInformation && this.platformInformation.distribution) ?\n\t\t\t\t`${this.platformInformation.distribution.name}, ${this.platformInformation.distribution.version}` : '';\n\n\t\t\tthis.reporter.sendTelemetryEvent(eventName, properties, measures);\n\t\t});\n\t}\n}\n\n/**\n * Handle Language Service client errors\n * @class LanguageClientErrorHandler\n */\nexport class LanguageClientErrorHandler implements ErrorHandler {\n\n\t/**\n\t * Show an error message prompt with a link to known issues wiki page\n\t * @memberOf LanguageClientErrorHandler\n\t */\n\tshowOnErrorPrompt(): void {\n\t\tTelemetry.sendTelemetryEvent(Constants.serviceName + 'Crash');\n\t\tvscode.window.showErrorMessage(\n\t\t\tConstants.serviceCrashMessage,\n\t\t\tConstants.serviceCrashButton).then(action => {\n\t\t\t\tif (action && action === Constants.serviceCrashButton) {\n\t\t\t\t\topener(Constants.serviceCrashLink);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t/**\n\t * Callback for language service client error\n\t *\n\t * @param {Error} error\n\t * @param {Message} message\n\t * @param {number} count\n\t * @returns {ErrorAction}\n\t *\n\t * @memberOf LanguageClientErrorHandler\n\t */\n\terror(error: Error, message: Message, count: number): ErrorAction {\n\t\tthis.showOnErrorPrompt();\n\n\t\t// we don't retry running the service since crashes leave the extension\n\t\t// in a bad, unrecovered state\n\t\treturn ErrorAction.Shutdown;\n\t}\n\n\t/**\n\t * Callback for language service client closed\n\t *\n\t * @returns {CloseAction}\n\t *\n\t * @memberOf LanguageClientErrorHandler\n\t */\n\tclosed(): CloseAction {\n\t\tthis.showOnErrorPrompt();\n\n\t\t// we don't retry running the service since crashes leave the extension\n\t\t// in a bad, unrecovered state\n\t\treturn CloseAction.DoNotRestart;\n\t}\n}\n\nTelemetry.initialize();\n"]}