{"version":3,"file":"azureResource/resourceService.js","sourceRoot":"../src","sources":["azureResource/resourceService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,YAAY,CAAC;;;;;;;;;;AAEb,mCAA8C;AAM9C;IACC;QA6GQ,gCAA2B,GAAY,KAAK,CAAC;QAC7C,uBAAkB,GAA2E,EAAE,CAAC;QAChG,uBAAkB,GAAmF,EAAE,CAAC;IA9GhH,CAAC;IAEM,MAAM,CAAC,WAAW;QACxB,OAAO,oBAAoB,CAAC,SAAS,CAAC;IACvC,CAAC;IAEY,uBAAuB;;YACnC,MAAM,IAAI,CAAC,iCAAiC,EAAE,CAAC;YAE/C,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAC7C,CAAC;KAAA;IAEM,wBAAwB,CAAC,gBAAsD;QACrF,IAAI,CAAC,0BAA0B,CAAC,gBAAgB,CAAC,CAAC;IACnD,CAAC;IAEM,sBAAsB;QAC5B,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;QAC7B,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;QAC7B,IAAI,CAAC,2BAA2B,GAAG,KAAK,CAAC;IAC1C,CAAC;IAEY,eAAe,CAAC,kBAA0B,EAAE,OAAgB,EAAE,YAAqD,EAAE,OAAe;;YAChJ,MAAM,IAAI,CAAC,iCAAiC,EAAE,CAAC;YAE/C,IAAI,CAAC,CAAC,kBAAkB,IAAI,IAAI,CAAC,kBAAkB,CAAC,EAAE;gBACrD,MAAM,IAAI,KAAK,CAAC,8CAA8C,kBAAkB,EAAE,CAAC,CAAC;aACpF;YAED,MAAM,gBAAgB,GAAG,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;YACrE,MAAM,QAAQ,GAAG,MAAM,gBAAgB,CAAC,WAAW,EAAE,CAAC;YAEtD,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAkC;gBAChE,kBAAkB,EAAE,kBAAkB;gBACtC,YAAY,EAAoC;oBAC/C,OAAO,EAAE,OAAO;oBAChB,YAAY,EAAE,YAAY;oBAC1B,QAAQ,EAAE,OAAO;oBACjB,QAAQ,EAAE,KAAK,CAAC,QAAQ;iBACxB;aACD,CAAA,CAAC,CAAC;QACJ,CAAC;KAAA;IAEY,WAAW,CAAC,kBAA0B,EAAE,OAAyC;;YAC7F,MAAM,IAAI,CAAC,iCAAiC,EAAE,CAAC;YAE/C,IAAI,CAAC,CAAC,kBAAkB,IAAI,IAAI,CAAC,kBAAkB,CAAC,EAAE;gBACrD,MAAM,IAAI,KAAK,CAAC,8CAA8C,kBAAkB,EAAE,CAAC,CAAC;aACpF;YAED,MAAM,gBAAgB,GAAG,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;YACrE,MAAM,QAAQ,GAAG,MAAM,gBAAgB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YAE7D,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAkC;gBAChE,kBAAkB,EAAE,kBAAkB;gBACtC,YAAY,EAAE,KAAK;aACnB,CAAA,CAAC,CAAC;QACJ,CAAC;KAAA;IAEY,WAAW,CAAC,kBAA0B,EAAE,OAA0C;;YAC9F,MAAM,IAAI,CAAC,iCAAiC,EAAE,CAAC;YAE/C,IAAI,CAAC,CAAC,kBAAkB,IAAI,IAAI,CAAC,kBAAkB,CAAC,EAAE;gBACrD,MAAM,IAAI,KAAK,CAAC,8CAA8C,kBAAkB,EAAE,CAAC,CAAC;aACpF;YAED,MAAM,gBAAgB,GAAG,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;YACrE,OAAO,gBAAgB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAC9C,CAAC;KAAA;IAED,IAAW,0BAA0B;QACpC,OAAO,IAAI,CAAC,2BAA2B,CAAC;IACzC,CAAC;IAED,IAAW,0BAA0B,CAAC,KAAc;QACnD,IAAI,CAAC,2BAA2B,GAAG,KAAK,CAAC;IAC1C,CAAC;IAEa,iCAAiC;;YAC9C,IAAI,IAAI,CAAC,2BAA2B,EAAE;gBACrC,OAAO;aACP;YAED,KAAK,MAAM,SAAS,IAAI,mBAAU,CAAC,GAAG,EAAE;gBACvC,MAAM,WAAW,GAAG,SAAS,CAAC,WAAW,IAAI,SAAS,CAAC,WAAW,CAAC,WAAW,CAAC;gBAC/E,IAAI,CAAC,WAAW,EAAE;oBACjB,SAAS;iBACT;gBAED,IAAI,WAAW,CAAC,2BAA2B,CAAC,EAAE;oBAC7C,MAAM,SAAS,CAAC,QAAQ,EAAE,CAAC;oBAE3B,IAAI,SAAS,CAAC,OAAO,IAAI,SAAS,CAAC,OAAO,CAAC,gBAAgB,EAAE;wBAC5D,KAAK,MAAM,gBAAgB,IAA4C,SAAS,CAAC,OAAO,CAAC,gBAAgB,EAAE,EAAE;4BAC5G,IAAI,CAAC,0BAA0B,CAAC,gBAAgB,CAAC,CAAC;yBAClD;qBACD;iBACD;aACD;YAED,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC;QACzC,CAAC;KAAA;IAEO,0BAA0B,CAAC,gBAAsD;QACxF,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,UAAU,CAAC,GAAG,gBAAgB,CAAC;QACxE,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,UAAU,CAAC,GAAG,gBAAgB,CAAC,mBAAmB,EAAE,CAAC;IAC/F,CAAC;;AAMuB,8BAAS,GAAG,IAAI,oBAAoB,EAAE,CAAC;AAlHhE,oDAmHC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport { extensions, TreeItem } from 'vscode';\nimport { Account } from 'sqlops';\n\nimport { azureResource } from './azure-resource';\nimport { IAzureResourceNodeWithProviderId } from './interfaces';\n\nexport class AzureResourceService {\n\tprivate constructor() {\n\t}\n\n\tpublic static getInstance(): AzureResourceService {\n\t\treturn AzureResourceService._instance;\n\t}\n\n\tpublic async listResourceProviderIds(): Promise<string[]> {\n\t\tawait this.ensureResourceProvidersRegistered();\n\n\t\treturn Object.keys(this._resourceProviders);\n\t}\n\n\tpublic registerResourceProvider(resourceProvider: azureResource.IAzureResourceProvider): void {\n\t\tthis.doRegisterResourceProvider(resourceProvider);\n\t}\n\n\tpublic clearResourceProviders(): void {\n\t\tthis._resourceProviders = {};\n\t\tthis._treeDataProviders = {};\n\t\tthis._areResourceProvidersLoaded = false;\n\t}\n\n\tpublic async getRootChildren(resourceProviderId: string, account: Account, subscription: azureResource.AzureResourceSubscription, tenatId: string): Promise<IAzureResourceNodeWithProviderId[]> {\n\t\tawait this.ensureResourceProvidersRegistered();\n\n\t\tif (!(resourceProviderId in this._resourceProviders)) {\n\t\t\tthrow new Error(`Azure resource provider doesn't exist. Id: ${resourceProviderId}`);\n\t\t}\n\n\t\tconst treeDataProvider = this._treeDataProviders[resourceProviderId];\n\t\tconst children = await treeDataProvider.getChildren();\n\n\t\treturn children.map((child) => <IAzureResourceNodeWithProviderId>{\n\t\t\tresourceProviderId: resourceProviderId,\n\t\t\tresourceNode: <azureResource.IAzureResourceNode>{\n\t\t\t\taccount: account,\n\t\t\t\tsubscription: subscription,\n\t\t\t\ttenantId: tenatId,\n\t\t\t\ttreeItem: child.treeItem\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic async getChildren(resourceProviderId: string, element: azureResource.IAzureResourceNode): Promise<IAzureResourceNodeWithProviderId[]> {\n\t\tawait this.ensureResourceProvidersRegistered();\n\n\t\tif (!(resourceProviderId in this._resourceProviders)) {\n\t\t\tthrow new Error(`Azure resource provider doesn't exist. Id: ${resourceProviderId}`);\n\t\t}\n\n\t\tconst treeDataProvider = this._treeDataProviders[resourceProviderId];\n\t\tconst children = await treeDataProvider.getChildren(element);\n\n\t\treturn children.map((child) => <IAzureResourceNodeWithProviderId>{\n\t\t\tresourceProviderId: resourceProviderId,\n\t\t\tresourceNode: child\n\t\t});\n\t}\n\n\tpublic async getTreeItem(resourceProviderId: string, element?: azureResource.IAzureResourceNode): Promise<TreeItem> {\n\t\tawait this.ensureResourceProvidersRegistered();\n\n\t\tif (!(resourceProviderId in this._resourceProviders)) {\n\t\t\tthrow new Error(`Azure resource provider doesn't exist. Id: ${resourceProviderId}`);\n\t\t}\n\n\t\tconst treeDataProvider = this._treeDataProviders[resourceProviderId];\n\t\treturn treeDataProvider.getTreeItem(element);\n\t}\n\n\tpublic get areResourceProvidersLoaded(): boolean {\n\t\treturn this._areResourceProvidersLoaded;\n\t}\n\n\tpublic set areResourceProvidersLoaded(value: boolean) {\n\t\tthis._areResourceProvidersLoaded = value;\n\t}\n\n\tprivate async ensureResourceProvidersRegistered(): Promise<void> {\n\t\tif (this._areResourceProvidersLoaded) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const extension of extensions.all) {\n\t\t\tconst contributes = extension.packageJSON && extension.packageJSON.contributes;\n\t\t\tif (!contributes) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (contributes['hasAzureResourceProviders']) {\n\t\t\t\tawait extension.activate();\n\n\t\t\t\tif (extension.exports && extension.exports.provideResources) {\n\t\t\t\t\tfor (const resourceProvider of <azureResource.IAzureResourceProvider[]>extension.exports.provideResources()) {\n\t\t\t\t\t\tthis.doRegisterResourceProvider(resourceProvider);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._areResourceProvidersLoaded = true;\n\t}\n\n\tprivate doRegisterResourceProvider(resourceProvider: azureResource.IAzureResourceProvider): void {\n\t\tthis._resourceProviders[resourceProvider.providerId] = resourceProvider;\n\t\tthis._treeDataProviders[resourceProvider.providerId] = resourceProvider.getTreeDataProvider();\n\t}\n\n\tprivate _areResourceProvidersLoaded: boolean = false;\n\tprivate _resourceProviders: { [resourceProviderId: string]: azureResource.IAzureResourceProvider } = {};\n\tprivate _treeDataProviders: { [resourceProviderId: string]: azureResource.IAzureResourceTreeDataProvider } = {};\n\n\tprivate static readonly _instance = new AzureResourceService();\n}"]}