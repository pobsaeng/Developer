{"version":3,"file":"test/azureResource/tree/subscriptionTreeNode.test.js","sourceRoot":"../src","sources":["test/azureResource/tree/subscriptionTreeNode.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport * as should from 'should';\nimport * as TypeMoq from 'typemoq';\nimport * as sqlops from 'sqlops';\nimport * as vscode from 'vscode';\nimport 'mocha';\nimport { AppContext } from '../../../appContext';\nimport { ApiWrapper } from '../../../apiWrapper';\n\nimport { azureResource } from '../../../azureResource/azure-resource';\nimport { IAzureResourceTreeChangeHandler } from '../../../azureResource/tree/treeChangeHandler';\nimport { AzureResourceSubscriptionTreeNode } from '../../../azureResource/tree/subscriptionTreeNode';\nimport { AzureResourceItemType, AzureResourceServiceNames } from '../../../azureResource/constants';\nimport { AzureResourceService } from '../../../azureResource/resourceService';\nimport { AzureResourceResourceTreeNode } from '../../../azureResource/resourceTreeNode';\nimport { IAzureResourceCacheService } from '../../../azureResource/interfaces';\nimport { generateGuid } from '../../../azureResource/utils';\n\n// Mock services\nlet mockAppContext: AppContext;\n\nlet mockExtensionContext: TypeMoq.IMock<vscode.ExtensionContext>;\nlet mockApiWrapper: TypeMoq.IMock<ApiWrapper>;\nlet mockCacheService: TypeMoq.IMock<IAzureResourceCacheService>;\n\nlet mockTreeChangeHandler: TypeMoq.IMock<IAzureResourceTreeChangeHandler>;\n\n// Mock test data\nconst mockAccount: sqlops.Account = {\n\tkey: {\n\t\taccountId: 'mock_account',\n\t\tproviderId: 'mock_provider'\n\t},\n\tdisplayInfo: {\n\t\tdisplayName: 'mock_account@test.com',\n\t\taccountType: 'Microsoft',\n\t\tcontextualDisplayName: 'test'\n\t},\n\tproperties: undefined,\n\tisStale: false\n};\n\nconst mockSubscription: azureResource.AzureResourceSubscription = {\n\tid: 'mock_subscription',\n\tname: 'mock subscription'\n};\n\nconst mockTenantId: string = 'mock_tenant';\n\nlet mockResourceTreeDataProvider1: TypeMoq.IMock<azureResource.IAzureResourceTreeDataProvider>;\nlet mockResourceProvider1: TypeMoq.IMock<azureResource.IAzureResourceProvider>;\n\nlet mockResourceTreeDataProvider2: TypeMoq.IMock<azureResource.IAzureResourceTreeDataProvider>;\nlet mockResourceProvider2: TypeMoq.IMock<azureResource.IAzureResourceProvider>;\n\nconst resourceService: AzureResourceService = AzureResourceService.getInstance();\n\ndescribe('AzureResourceSubscriptionTreeNode.info', function(): void {\n\tbeforeEach(() => {\n\t\tmockExtensionContext = TypeMoq.Mock.ofType<vscode.ExtensionContext>();\n\t\tmockApiWrapper = TypeMoq.Mock.ofType<ApiWrapper>();\n\t\tmockCacheService = TypeMoq.Mock.ofType<IAzureResourceCacheService>();\n\n\t\tmockAppContext = new AppContext(mockExtensionContext.object, mockApiWrapper.object);\n\n\t\tmockAppContext.registerService<IAzureResourceCacheService>(AzureResourceServiceNames.cacheService, mockCacheService.object);\n\n\t\tmockCacheService.setup((o) => o.generateKey(TypeMoq.It.isAnyString())).returns(() => generateGuid());\n\n\t\tmockTreeChangeHandler = TypeMoq.Mock.ofType<IAzureResourceTreeChangeHandler>();\n\n\t\tmockResourceTreeDataProvider1 = TypeMoq.Mock.ofType<azureResource.IAzureResourceTreeDataProvider>();\n\t\tmockResourceTreeDataProvider1.setup((o) => o.getChildren()).returns(() => Promise.resolve([TypeMoq.Mock.ofType<azureResource.IAzureResourceNode>().object]));\n\t\tmockResourceTreeDataProvider1.setup((o) => o.getTreeItem(TypeMoq.It.isAny())).returns(() => Promise.resolve(TypeMoq.It.isAny()));\n\t\tmockResourceProvider1 = TypeMoq.Mock.ofType<azureResource.IAzureResourceProvider>();\n\t\tmockResourceProvider1.setup((o) => o.providerId).returns(() => 'mockResourceProvider1');\n\t\tmockResourceProvider1.setup((o) => o.getTreeDataProvider()).returns(() => mockResourceTreeDataProvider1.object);\n\n\t\tmockResourceTreeDataProvider2 = TypeMoq.Mock.ofType<azureResource.IAzureResourceTreeDataProvider>();\n\t\tmockResourceTreeDataProvider2.setup((o) => o.getChildren()).returns(() => Promise.resolve([TypeMoq.Mock.ofType<azureResource.IAzureResourceNode>().object]));\n\t\tmockResourceTreeDataProvider2.setup((o) => o.getTreeItem(TypeMoq.It.isAny())).returns(() => Promise.resolve(TypeMoq.It.isAny()));\n\t\tmockResourceProvider2 = TypeMoq.Mock.ofType<azureResource.IAzureResourceProvider>();\n\t\tmockResourceProvider2.setup((o) => o.providerId).returns(() => 'mockResourceProvider2');\n\t\tmockResourceProvider2.setup((o) => o.getTreeDataProvider()).returns(() => mockResourceTreeDataProvider2.object);\n\n\t\tresourceService.clearResourceProviders();\n\t\tresourceService.registerResourceProvider(mockResourceProvider1.object);\n\t\tresourceService.registerResourceProvider(mockResourceProvider2.object);\n\n\t\tresourceService.areResourceProvidersLoaded = true;\n\t});\n\n\tit('Should be correct when created.', async function(): Promise<void> {\n\t\tconst subscriptionTreeNode = new AzureResourceSubscriptionTreeNode(mockAccount, mockSubscription, mockTenantId, mockAppContext, mockTreeChangeHandler.object, undefined);\n\n\t\tshould(subscriptionTreeNode.nodePathValue).equal(`account_${mockAccount.key.accountId}.subscription_${mockSubscription.id}.tenant_${mockTenantId}`);\n\n\t\tconst treeItem = await subscriptionTreeNode.getTreeItem();\n\t\tshould(treeItem.label).equal(mockSubscription.name);\n\t\tshould(treeItem.collapsibleState).equal(vscode.TreeItemCollapsibleState.Collapsed);\n\t\tshould(treeItem.contextValue).equal(AzureResourceItemType.subscription);\n\n\t\tconst nodeInfo = subscriptionTreeNode.getNodeInfo();\n\t\tshould(nodeInfo.label).equal(mockSubscription.name);\n\t\tshould(nodeInfo.isLeaf).equal(false);\n\t\tshould(nodeInfo.nodeType).equal(AzureResourceItemType.subscription);\n\t\tshould(nodeInfo.iconType).equal(AzureResourceItemType.subscription);\n\t});\n});\n\ndescribe('AzureResourceSubscriptionTreeNode.getChildren', function(): void {\n\tbeforeEach(() => {\n\t\tmockExtensionContext = TypeMoq.Mock.ofType<vscode.ExtensionContext>();\n\t\tmockApiWrapper = TypeMoq.Mock.ofType<ApiWrapper>();\n\t\tmockCacheService = TypeMoq.Mock.ofType<IAzureResourceCacheService>();\n\n\t\tmockAppContext = new AppContext(mockExtensionContext.object, mockApiWrapper.object);\n\t\tmockAppContext.registerService<IAzureResourceCacheService>(AzureResourceServiceNames.cacheService, mockCacheService.object);\n\n\t\tmockCacheService.setup((o) => o.generateKey(TypeMoq.It.isAnyString())).returns(() => generateGuid());\n\n\t\tmockTreeChangeHandler = TypeMoq.Mock.ofType<IAzureResourceTreeChangeHandler>();\n\n\t\tmockResourceTreeDataProvider1 = TypeMoq.Mock.ofType<azureResource.IAzureResourceTreeDataProvider>();\n\t\tmockResourceTreeDataProvider1.setup((o) => o.getChildren()).returns(() => Promise.resolve([TypeMoq.Mock.ofType<azureResource.IAzureResourceNode>().object]));\n\t\tmockResourceTreeDataProvider1.setup((o) => o.getTreeItem(TypeMoq.It.isAny())).returns(() => Promise.resolve(TypeMoq.It.isAny()));\n\t\tmockResourceProvider1 = TypeMoq.Mock.ofType<azureResource.IAzureResourceProvider>();\n\t\tmockResourceProvider1.setup((o) => o.providerId).returns(() => 'mockResourceProvider1');\n\t\tmockResourceProvider1.setup((o) => o.getTreeDataProvider()).returns(() => mockResourceTreeDataProvider1.object);\n\n\t\tmockResourceTreeDataProvider2 = TypeMoq.Mock.ofType<azureResource.IAzureResourceTreeDataProvider>();\n\t\tmockResourceTreeDataProvider2.setup((o) => o.getChildren()).returns(() => Promise.resolve([TypeMoq.Mock.ofType<azureResource.IAzureResourceNode>().object]));\n\t\tmockResourceTreeDataProvider2.setup((o) => o.getTreeItem(TypeMoq.It.isAny())).returns(() => Promise.resolve(TypeMoq.It.isAny()));\n\t\tmockResourceProvider2 = TypeMoq.Mock.ofType<azureResource.IAzureResourceProvider>();\n\t\tmockResourceProvider2.setup((o) => o.providerId).returns(() => 'mockResourceProvider2');\n\t\tmockResourceProvider2.setup((o) => o.getTreeDataProvider()).returns(() => mockResourceTreeDataProvider2.object);\n\n\t\tresourceService.clearResourceProviders();\n\t\tresourceService.registerResourceProvider(mockResourceProvider1.object);\n\t\tresourceService.registerResourceProvider(mockResourceProvider2.object);\n\n\t\tresourceService.areResourceProvidersLoaded = true;\n\t});\n\n\tit('Should return resource containers.', async function(): Promise<void> {\n\t\tconst subscriptionTreeNode = new AzureResourceSubscriptionTreeNode(mockAccount, mockSubscription, mockTenantId, mockAppContext, mockTreeChangeHandler.object, undefined);\n\t\tconst children = await subscriptionTreeNode.getChildren();\n\n\t\tmockResourceTreeDataProvider1.verify((o) => o.getChildren(), TypeMoq.Times.once());\n\n\t\tmockResourceTreeDataProvider2.verify((o) => o.getChildren(), TypeMoq.Times.once());\n\n\t\tconst expectedChildren = await resourceService.listResourceProviderIds();\n\n\t\tshould(children).Array();\n\t\tshould(children.length).equal(expectedChildren.length);\n\t\tfor (const child of children) {\n\t\t\tshould(child).instanceOf(AzureResourceResourceTreeNode);\n\t\t}\n\t});\n});\n"]}