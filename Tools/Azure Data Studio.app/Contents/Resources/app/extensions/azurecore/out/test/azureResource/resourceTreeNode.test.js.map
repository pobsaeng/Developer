{"version":3,"file":"test/azureResource/resourceTreeNode.test.js","sourceRoot":"../src","sources":["test/azureResource/resourceTreeNode.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport * as should from 'should';\nimport * as TypeMoq from 'typemoq';\nimport * as sqlops from 'sqlops';\nimport * as vscode from 'vscode';\nimport 'mocha';\n\nimport { azureResource } from '../../azureResource/azure-resource';\nimport { AzureResourceService } from '../../azureResource/resourceService';\nimport { AzureResourceResourceTreeNode } from '../../azureResource/resourceTreeNode';\n\nconst resourceService = AzureResourceService.getInstance();\n\n// Mock test data\nconst mockAccount: sqlops.Account = {\n\tkey: {\n\t\taccountId: 'mock_account',\n\t\tproviderId: 'mock_provider'\n\t},\n\tdisplayInfo: {\n\t\tdisplayName: 'mock_account@test.com',\n\t\taccountType: 'Microsoft',\n\t\tcontextualDisplayName: 'test'\n\t},\n\tproperties: undefined,\n\tisStale: false\n};\n\nconst mockSubscription: azureResource.AzureResourceSubscription = {\n\tid: 'mock_subscription',\n\tname: 'mock subscription'\n};\n\nconst mockTenantId: string = 'mock_tenant';\n\nconst mockResourceProviderId: string = 'mock_resource_provider';\n\nconst mockResourceRootNode: azureResource.IAzureResourceNode = {\n\taccount: mockAccount,\n\tsubscription: mockSubscription,\n\ttenantId: mockTenantId,\n\ttreeItem: {\n\t\tid: 'mock_resource_root_node',\n\t\tlabel: 'mock resource root node',\n\t\ticonPath: undefined,\n\t\tcollapsibleState: vscode.TreeItemCollapsibleState.Collapsed,\n\t\tcontextValue: 'mock_resource_root_node'\n\t}\n};\n\nconst mockResourceNode1: azureResource.IAzureResourceNode = {\n\taccount: mockAccount,\n\tsubscription: mockSubscription,\n\ttenantId: mockTenantId,\n\ttreeItem: {\n\t\tid: 'mock_resource_node_1',\n\t\tlabel: 'mock resource node 1',\n\t\ticonPath: undefined,\n\t\tcollapsibleState: vscode.TreeItemCollapsibleState.None,\n\t\tcontextValue: 'mock_resource_node'\n\t}\n};\n\nconst mockResourceNode2: azureResource.IAzureResourceNode = {\n\taccount: mockAccount,\n\tsubscription: mockSubscription,\n\ttenantId: mockTenantId,\n\ttreeItem: {\n\t\tid: 'mock_resource_node_2',\n\t\tlabel: 'mock resource node 2',\n\t\ticonPath: undefined,\n\t\tcollapsibleState: vscode.TreeItemCollapsibleState.None,\n\t\tcontextValue: 'mock_resource_node'\n\t}\n};\n\nconst mockResourceNodes: azureResource.IAzureResourceNode[] = [mockResourceNode1, mockResourceNode2];\n\nlet mockResourceTreeDataProvider: TypeMoq.IMock<azureResource.IAzureResourceTreeDataProvider>;\nlet mockResourceProvider: TypeMoq.IMock<azureResource.IAzureResourceProvider>;\n\ndescribe('AzureResourceResourceTreeNode.info', function(): void {\n\tbeforeEach(() => {\n\t\tmockResourceTreeDataProvider = TypeMoq.Mock.ofType<azureResource.IAzureResourceTreeDataProvider>();\n\t\tmockResourceTreeDataProvider.setup((o) => o.getTreeItem(mockResourceRootNode)).returns(() => mockResourceRootNode.treeItem);\n\t\tmockResourceTreeDataProvider.setup((o) => o.getChildren(mockResourceRootNode)).returns(() => Promise.resolve(mockResourceNodes));\n\n\t\tmockResourceProvider = TypeMoq.Mock.ofType<azureResource.IAzureResourceProvider>();\n\t\tmockResourceProvider.setup((o) => o.providerId).returns(() => mockResourceProviderId);\n\t\tmockResourceProvider.setup((o) => o.getTreeDataProvider()).returns(() => mockResourceTreeDataProvider.object);\n\n\t\tresourceService.clearResourceProviders();\n\t\tresourceService.registerResourceProvider(mockResourceProvider.object);\n\n\t\tresourceService.areResourceProvidersLoaded = true;\n\t});\n\n\tit('Should be correct when created.', async function(): Promise<void> {\n\t\tconst resourceTreeNode = new AzureResourceResourceTreeNode({\n\t\t\tresourceProviderId: mockResourceProviderId,\n\t\t\tresourceNode: mockResourceRootNode\n\t\t}, undefined);\n\n\t\tshould(resourceTreeNode.nodePathValue).equal(mockResourceRootNode.treeItem.id);\n\n\t\tconst treeItem = await resourceTreeNode.getTreeItem();\n\t\tshould(treeItem.id).equal(mockResourceRootNode.treeItem.id);\n\t\tshould(treeItem.label).equal(mockResourceRootNode.treeItem.label);\n\t\tshould(treeItem.collapsibleState).equal(mockResourceRootNode.treeItem.collapsibleState);\n\t\tshould(treeItem.contextValue).equal(mockResourceRootNode.treeItem.contextValue);\n\n\t\tconst nodeInfo = resourceTreeNode.getNodeInfo();\n\t\tshould(nodeInfo.label).equal(mockResourceRootNode.treeItem.label);\n\t\tshould(nodeInfo.isLeaf).equal(mockResourceRootNode.treeItem.collapsibleState === vscode.TreeItemCollapsibleState.None);\n\t\tshould(nodeInfo.nodeType).equal(mockResourceRootNode.treeItem.contextValue);\n\t\tshould(nodeInfo.iconType).equal(mockResourceRootNode.treeItem.contextValue);\n\t});\n});\n\ndescribe('AzureResourceResourceTreeNode.getChildren', function(): void {\n\tbeforeEach(() => {\n\t\tmockResourceTreeDataProvider = TypeMoq.Mock.ofType<azureResource.IAzureResourceTreeDataProvider>();\n\t\tmockResourceTreeDataProvider.setup((o) => o.getChildren(mockResourceRootNode)).returns(() => Promise.resolve(mockResourceNodes));\n\n\t\tmockResourceProvider = TypeMoq.Mock.ofType<azureResource.IAzureResourceProvider>();\n\t\tmockResourceProvider.setup((o) => o.providerId).returns(() => mockResourceProviderId);\n\t\tmockResourceProvider.setup((o) => o.getTreeDataProvider()).returns(() => mockResourceTreeDataProvider.object);\n\n\t\tresourceService.clearResourceProviders();\n\t\tresourceService.registerResourceProvider(mockResourceProvider.object);\n\n\t\tresourceService.areResourceProvidersLoaded = true;\n\t});\n\n\tit('Should return resource nodes when it is container node.', async function(): Promise<void> {\n\t\tconst resourceTreeNode = new AzureResourceResourceTreeNode({\n\t\t\tresourceProviderId: mockResourceProviderId,\n\t\t\tresourceNode: mockResourceRootNode\n\t\t}, undefined);\n\n\t\tconst children = await resourceTreeNode.getChildren();\n\n\t\tmockResourceTreeDataProvider.verify((o) => o.getChildren(mockResourceRootNode), TypeMoq.Times.once());\n\n\t\tshould(children).Array();\n\t\tshould(children.length).equal(mockResourceNodes.length);\n\n\t\tfor (let ix = 0; ix < children.length; ix++) {\n\t\t\tconst child = children[ix];\n\n\t\t\tshould(child).instanceOf(AzureResourceResourceTreeNode);\n\n\t\t\tconst childNode = (child as AzureResourceResourceTreeNode).resourceNodeWithProviderId;\n\t\t\tshould(childNode.resourceProviderId).equal(mockResourceProviderId);\n\t\t\tshould(childNode.resourceNode.account).equal(mockAccount);\n\t\t\tshould(childNode.resourceNode.subscription).equal(mockSubscription);\n\t\t\tshould(childNode.resourceNode.tenantId).equal(mockTenantId);\n\t\t\tshould(childNode.resourceNode.treeItem.id).equal(mockResourceNodes[ix].treeItem.id);\n\t\t\tshould(childNode.resourceNode.treeItem.label).equal(mockResourceNodes[ix].treeItem.label);\n\t\t\tshould(childNode.resourceNode.treeItem.collapsibleState).equal(mockResourceNodes[ix].treeItem.collapsibleState);\n\t\t\tshould(childNode.resourceNode.treeItem.contextValue).equal(mockResourceNodes[ix].treeItem.contextValue);\n\t\t}\n\t});\n\n\tit('Should return empty when it is leaf node.', async function(): Promise<void> {\n\t\tconst resourceTreeNode = new AzureResourceResourceTreeNode({\n\t\t\tresourceProviderId: mockResourceProviderId,\n\t\t\tresourceNode: mockResourceNode1\n\t\t}, undefined);\n\n\t\tconst children = await resourceTreeNode.getChildren();\n\n\t\tmockResourceTreeDataProvider.verify((o) => o.getChildren(), TypeMoq.Times.exactly(0));\n\n\t\tshould(children).Array();\n\t\tshould(children.length).equal(0);\n\t});\n});\n"]}