{"version":3,"file":"extension.js","sourceRoot":"../src","sources":["extension.ts"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\nimport * as constants from './constants';\n\nimport AzureResourceController from './controllers/azureResourceController';\nimport { AppContext } from './appContext';\nimport ControllerBase from './controllers/controllerBase';\nimport { ApiWrapper } from './apiWrapper';\nimport { AzureAccountProviderService } from './account-provider/azureAccountProviderService';\n\nimport { AzureResourceDatabaseServerProvider } from './azureResource/providers/databaseServer/databaseServerProvider';\nimport { AzureResourceDatabaseServerService } from './azureResource/providers/databaseServer/databaseServerService';\nimport { AzureResourceDatabaseProvider } from './azureResource/providers/database/databaseProvider';\nimport { AzureResourceDatabaseService } from './azureResource/providers/database/databaseService';\n\nlet controllers: ControllerBase[] = [];\n\n\n// The function is a duplicate of \\src\\paths.js. IT would be better to import path.js but it doesn't\n// work for now because the extension is running in different process.\nexport function getAppDataPath() {\n\tvar platform = process.platform;\n\tswitch (platform) {\n\t\tcase 'win32': return process.env['APPDATA'] || path.join(process.env['USERPROFILE'], 'AppData', 'Roaming');\n\t\tcase 'darwin': return path.join(os.homedir(), 'Library', 'Application Support');\n\t\tcase 'linux': return process.env['XDG_CONFIG_HOME'] || path.join(os.homedir(), '.config');\n\t\tdefault: throw new Error('Platform not supported');\n\t}\n}\n\nexport function getDefaultLogLocation() {\n\treturn path.join(getAppDataPath(), 'azuredatastudio');\n}\n\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(extensionContext: vscode.ExtensionContext) {\n\tconst apiWrapper = new ApiWrapper();\n\tlet appContext = new AppContext(extensionContext, apiWrapper);\n\tlet activations: Thenable<boolean>[] = [];\n\n\t// Create the folder for storing the token caches\n\tlet storagePath = path.join(getDefaultLogLocation(), constants.extensionName);\n\ttry {\n\t\tif (!fs.existsSync(storagePath)) {\n\t\t\tfs.mkdirSync(storagePath);\n\t\t\tconsole.log('Initialized Azure account extension storage.');\n\t\t}\n\t} catch (e) {\n\t\tconsole.error(`Initialization of Azure account extension storage failed: ${e}`);\n\t\tconsole.error('Azure accounts will not be available');\n\t\treturn;\n\t}\n\n\t// Create the provider service and activate\n\tconst accountProviderService = new AzureAccountProviderService(extensionContext, storagePath);\n\textensionContext.subscriptions.push(accountProviderService);\n\taccountProviderService.activate();\n\n\tconst azureResourceController = new AzureResourceController(appContext);\n\tcontrollers.push(azureResourceController);\n\textensionContext.subscriptions.push(azureResourceController);\n\tactivations.push(azureResourceController.activate());\n\n\treturn {\n\t\tprovideResources() {\n\t\t\treturn [\n\t\t\t\tnew AzureResourceDatabaseServerProvider(new AzureResourceDatabaseServerService(), apiWrapper, extensionContext),\n\t\t\t\tnew AzureResourceDatabaseProvider(new AzureResourceDatabaseService(), apiWrapper, extensionContext)\n\t\t\t];\n\t\t}\n\t};\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {\n\tfor (let controller of controllers) {\n\t\tcontroller.deactivate();\n\t}\n}\n"]}