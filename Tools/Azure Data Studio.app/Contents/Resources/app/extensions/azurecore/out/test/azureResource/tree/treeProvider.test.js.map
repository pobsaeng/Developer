{"version":3,"file":"test/azureResource/tree/treeProvider.test.js","sourceRoot":"../src","sources":["test/azureResource/tree/treeProvider.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport * as vscode from 'vscode';\nimport * as should from 'should';\nimport * as TypeMoq from 'typemoq';\nimport * as sqlops from 'sqlops';\nimport 'mocha';\nimport { AppContext } from '../../../appContext';\nimport { ApiWrapper } from '../../../apiWrapper';\n\nimport { IAzureResourceCacheService, IAzureResourceAccountService } from '../../../azureResource/interfaces';\nimport { AzureResourceTreeProvider } from '../../../azureResource/tree/treeProvider';\nimport { AzureResourceAccountTreeNode } from '../../../azureResource/tree/accountTreeNode';\nimport { AzureResourceAccountNotSignedInTreeNode } from '../../../azureResource/tree/accountNotSignedInTreeNode';\nimport { AzureResourceMessageTreeNode } from '../../../azureResource/messageTreeNode';\nimport { AzureResourceServiceNames } from '../../../azureResource/constants';\nimport { generateGuid } from '../../../azureResource/utils';\n\n// Mock services\nlet mockAppContext: AppContext;\n\nlet mockExtensionContext: TypeMoq.IMock<vscode.ExtensionContext>;\nlet mockApiWrapper: TypeMoq.IMock<ApiWrapper>;\nlet mockCacheService: TypeMoq.IMock<IAzureResourceCacheService>;\nlet mockAccountService: TypeMoq.IMock<IAzureResourceAccountService>;\n\n// Mock test data\nconst mockAccount1: sqlops.Account = {\n\tkey: {\n\t\taccountId: 'mock_account_1',\n\t\tproviderId: 'mock_provider'\n\t},\n\tdisplayInfo: {\n\t\tdisplayName: 'mock_account_1@test.com',\n\t\taccountType: 'Microsoft',\n\t\tcontextualDisplayName: 'test'\n\t},\n\tproperties: undefined,\n\tisStale: false\n};\nconst mockAccount2: sqlops.Account = {\n\tkey: {\n\t\taccountId: 'mock_account_2',\n\t\tproviderId: 'mock_provider'\n\t},\n\tdisplayInfo: {\n\t\tdisplayName: 'mock_account_2@test.com',\n\t\taccountType: 'Microsoft',\n\t\tcontextualDisplayName: 'test'\n\t},\n\tproperties: undefined,\n\tisStale: false\n};\nconst mockAccounts = [mockAccount1, mockAccount2];\n\ndescribe('AzureResourceTreeProvider.getChildren', function(): void {\n\tbeforeEach(() => {\n\t\tmockExtensionContext = TypeMoq.Mock.ofType<vscode.ExtensionContext>();\n\t\tmockApiWrapper = TypeMoq.Mock.ofType<ApiWrapper>();\n\t\tmockCacheService = TypeMoq.Mock.ofType<IAzureResourceCacheService>();\n\t\tmockAccountService = TypeMoq.Mock.ofType<IAzureResourceAccountService>();\n\n\t\tmockAppContext = new AppContext(mockExtensionContext.object, mockApiWrapper.object);\n\n\t\tmockAppContext.registerService<IAzureResourceCacheService>(AzureResourceServiceNames.cacheService, mockCacheService.object);\n\t\tmockAppContext.registerService<IAzureResourceAccountService>(AzureResourceServiceNames.accountService, mockAccountService.object);\n\n\t\tmockCacheService.setup((o) => o.generateKey(TypeMoq.It.isAnyString())).returns(() => generateGuid());\n\t});\n\n\tit('Should load accounts.', async function(): Promise<void> {\n\t\tmockAccountService.setup((o) => o.getAccounts()).returns(() => Promise.resolve(mockAccounts));\n\n\t\tconst treeProvider = new AzureResourceTreeProvider(mockAppContext);\n\t\ttreeProvider.isSystemInitialized = true;\n\n\t\tconst children = await treeProvider.getChildren(undefined);\n\n\t\tmockAccountService.verify((o) => o.getAccounts(), TypeMoq.Times.once());\n\n\t\tshould(children).Array();\n\t\tshould(children.length).equal(mockAccounts.length);\n\n\t\tfor (let ix = 0; ix < mockAccounts.length; ix++) {\n\t\t\tconst child = children[ix];\n\t\t\tconst account = mockAccounts[ix];\n\n\t\t\tshould(child).instanceof(AzureResourceAccountTreeNode);\n\t\t\tshould(child.nodePathValue).equal(`account_${account.key.accountId}`);\n\t\t}\n\t});\n\n\tit('Should handle when there is no accounts.', async function(): Promise<void> {\n\t\tmockAccountService.setup((o) => o.getAccounts()).returns(() => Promise.resolve(undefined));\n\n\t\tconst treeProvider = new AzureResourceTreeProvider(mockAppContext);\n\t\ttreeProvider.isSystemInitialized = true;\n\n\t\tconst children = await treeProvider.getChildren(undefined);\n\n\t\tshould(children).Array();\n\t\tshould(children.length).equal(1);\n\t\tshould(children[0]).instanceof(AzureResourceAccountNotSignedInTreeNode);\n\t});\n\n\tit('Should handle errors.', async function(): Promise<void> {\n\t\tconst mockAccountError = 'Test account error';\n\t\tmockAccountService.setup((o) => o.getAccounts()).returns(() => { throw new Error(mockAccountError); });\n\n\t\tconst treeProvider = new AzureResourceTreeProvider(mockAppContext);\n\t\ttreeProvider.isSystemInitialized = true;\n\n\t\tconst children = await treeProvider.getChildren(undefined);\n\n\t\tmockAccountService.verify((o) => o.getAccounts(), TypeMoq.Times.once());\n\n\t\tshould(children).Array();\n\t\tshould(children.length).equal(1);\n\t\tshould(children[0]).instanceof(AzureResourceMessageTreeNode);\n\t\tshould(children[0].nodePathValue).startWith('message_');\n\t\tshould(children[0].getNodeInfo().label).equal(`Error: ${mockAccountError}`);\n\t});\n});\n"]}