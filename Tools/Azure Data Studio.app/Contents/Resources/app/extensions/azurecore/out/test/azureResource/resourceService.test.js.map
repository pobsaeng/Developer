{"version":3,"file":"test/azureResource/resourceService.test.js","sourceRoot":"../src","sources":["test/azureResource/resourceService.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport * as should from 'should';\nimport * as TypeMoq from 'typemoq';\nimport * as sqlops from 'sqlops';\nimport 'mocha';\nimport { fail } from 'assert';\n\nimport { azureResource } from '../../azureResource/azure-resource';\nimport { AzureResourceService } from '../../azureResource/resourceService';\n\n// Mock test data\nconst mockAccount: sqlops.Account = {\n\tkey: {\n\t\taccountId: 'mock_account',\n\t\tproviderId: 'mock_provider'\n\t},\n\tdisplayInfo: {\n\t\tdisplayName: 'mock_account@test.com',\n\t\taccountType: 'Microsoft',\n\t\tcontextualDisplayName: 'test'\n\t},\n\tproperties: undefined,\n\tisStale: false\n};\n\nconst mockSubscription: azureResource.AzureResourceSubscription = {\n\tid: 'mock_subscription',\n\tname: 'mock subscription'\n};\n\nconst mockTenantId: string = 'mock_tenant';\n\nlet mockResourceTreeDataProvider1: TypeMoq.IMock<azureResource.IAzureResourceTreeDataProvider>;\nlet mockResourceProvider1: TypeMoq.IMock<azureResource.IAzureResourceProvider>;\n\nlet mockResourceTreeDataProvider2: TypeMoq.IMock<azureResource.IAzureResourceTreeDataProvider>;\nlet mockResourceProvider2: TypeMoq.IMock<azureResource.IAzureResourceProvider>;\n\nconst resourceService: AzureResourceService = AzureResourceService.getInstance();\n\ndescribe('AzureResourceService.listResourceProviderIds', function(): void {\n\tbeforeEach(() => {\n\t\tmockResourceTreeDataProvider1 = TypeMoq.Mock.ofType<azureResource.IAzureResourceTreeDataProvider>();\n\t\tmockResourceTreeDataProvider1.setup((o) => o.getChildren()).returns(() => Promise.resolve([TypeMoq.Mock.ofType<azureResource.IAzureResourceNode>().object]));\n\t\tmockResourceTreeDataProvider1.setup((o) => o.getTreeItem(TypeMoq.It.isAny())).returns(() => Promise.resolve(TypeMoq.It.isAny()));\n\t\tmockResourceProvider1 = TypeMoq.Mock.ofType<azureResource.IAzureResourceProvider>();\n\t\tmockResourceProvider1.setup((o) => o.providerId).returns(() => 'mockResourceProvider1');\n\t\tmockResourceProvider1.setup((o) => o.getTreeDataProvider()).returns(() => mockResourceTreeDataProvider1.object);\n\n\t\tmockResourceTreeDataProvider2 = TypeMoq.Mock.ofType<azureResource.IAzureResourceTreeDataProvider>();\n\t\tmockResourceTreeDataProvider2.setup((o) => o.getChildren()).returns(() => Promise.resolve([TypeMoq.Mock.ofType<azureResource.IAzureResourceNode>().object]));\n\t\tmockResourceTreeDataProvider2.setup((o) => o.getTreeItem(TypeMoq.It.isAny())).returns(() => Promise.resolve(TypeMoq.It.isAny()));\n\t\tmockResourceProvider2 = TypeMoq.Mock.ofType<azureResource.IAzureResourceProvider>();\n\t\tmockResourceProvider2.setup((o) => o.providerId).returns(() => 'mockResourceProvider2');\n\t\tmockResourceProvider2.setup((o) => o.getTreeDataProvider()).returns(() => mockResourceTreeDataProvider2.object);\n\n\t\tresourceService.clearResourceProviders();\n\t\tresourceService.areResourceProvidersLoaded = true;\n\t});\n\n\tit('Should be correct when registering providers.', async function(): Promise<void> {\n\t\tresourceService.registerResourceProvider(mockResourceProvider1.object);\n\t\tlet providerIds = await resourceService.listResourceProviderIds();\n\t\tshould(providerIds).Array();\n\t\tshould(providerIds.length).equal(1);\n\t\tshould(providerIds[0]).equal(mockResourceProvider1.object.providerId);\n\n\t\tresourceService.registerResourceProvider(mockResourceProvider2.object);\n\t\tproviderIds = await resourceService.listResourceProviderIds();\n\t\tshould(providerIds).Array();\n\t\tshould(providerIds.length).equal(2);\n\t\tshould(providerIds[0]).equal(mockResourceProvider1.object.providerId);\n\t\tshould(providerIds[1]).equal(mockResourceProvider2.object.providerId);\n\t});\n});\n\ndescribe('AzureResourceService.getRootChildren', function(): void {\n\tbeforeEach(() => {\n\t\tmockResourceTreeDataProvider1 = TypeMoq.Mock.ofType<azureResource.IAzureResourceTreeDataProvider>();\n\t\tmockResourceTreeDataProvider1.setup((o) => o.getChildren()).returns(() => Promise.resolve([TypeMoq.Mock.ofType<azureResource.IAzureResourceNode>().object]));\n\t\tmockResourceTreeDataProvider1.setup((o) => o.getTreeItem(TypeMoq.It.isAny())).returns(() => Promise.resolve(TypeMoq.It.isAny()));\n\t\tmockResourceProvider1 = TypeMoq.Mock.ofType<azureResource.IAzureResourceProvider>();\n\t\tmockResourceProvider1.setup((o) => o.providerId).returns(() => 'mockResourceProvider1');\n\t\tmockResourceProvider1.setup((o) => o.getTreeDataProvider()).returns(() => mockResourceTreeDataProvider1.object);\n\n\t\tresourceService.clearResourceProviders();\n\t\tresourceService.registerResourceProvider(mockResourceProvider1.object);\n\t\tresourceService.areResourceProvidersLoaded = true;\n\t});\n\n\tit('Should be correct when provider id is correct.', async function(): Promise<void> {\n\t\tconst children = await resourceService.getRootChildren(mockResourceProvider1.object.providerId, mockAccount, mockSubscription, mockTenantId);\n\n\t\tshould(children).Array();\n\t});\n\n\tit('Should throw exceptions when provider id is incorrect.', async function(): Promise<void> {\n\t\tconst providerId = 'non_existent_provider_id';\n\t\ttry {\n\t\t\tawait resourceService.getRootChildren(providerId, mockAccount, mockSubscription, mockTenantId);\n\t\t} catch (error) {\n\t\t\tshould(error.message).equal(`Azure resource provider doesn't exist. Id: ${providerId}`);\n\t\t\treturn;\n\t\t}\n\n\t\tfail();\n\t});\n});\n\ndescribe('AzureResourceService.getChildren', function(): void {\n\tbeforeEach(() => {\n\t\tmockResourceTreeDataProvider1 = TypeMoq.Mock.ofType<azureResource.IAzureResourceTreeDataProvider>();\n\t\tmockResourceTreeDataProvider1.setup((o) => o.getChildren()).returns(() => Promise.resolve([TypeMoq.Mock.ofType<azureResource.IAzureResourceNode>().object]));\n\t\tmockResourceTreeDataProvider1.setup((o) => o.getChildren(TypeMoq.It.isAny())).returns(() => Promise.resolve([TypeMoq.Mock.ofType<azureResource.IAzureResourceNode>().object]));\n\t\tmockResourceTreeDataProvider1.setup((o) => o.getTreeItem(TypeMoq.It.isAny())).returns(() => Promise.resolve(TypeMoq.It.isAny()));\n\t\tmockResourceProvider1 = TypeMoq.Mock.ofType<azureResource.IAzureResourceProvider>();\n\t\tmockResourceProvider1.setup((o) => o.providerId).returns(() => 'mockResourceProvider1');\n\t\tmockResourceProvider1.setup((o) => o.getTreeDataProvider()).returns(() => mockResourceTreeDataProvider1.object);\n\n\t\tresourceService.clearResourceProviders();\n\t\tresourceService.registerResourceProvider(mockResourceProvider1.object);\n\t\tresourceService.areResourceProvidersLoaded = true;\n\t});\n\n\tit('Should be correct when provider id is correct.', async function(): Promise<void> {\n\t\tconst children = await resourceService.getChildren(mockResourceProvider1.object.providerId, TypeMoq.It.isAny());\n\t\tshould(children).Array();\n\t});\n\n\tit('Should throw exceptions when provider id is incorrect.', async function(): Promise<void> {\n\t\tconst providerId = 'non_existent_provider_id';\n\t\ttry {\n\t\t\tawait resourceService.getRootChildren(providerId, mockAccount, mockSubscription, mockTenantId);\n\t\t} catch (error) {\n\t\t\tshould(error.message).equal(`Azure resource provider doesn't exist. Id: ${providerId}`);\n\t\t\treturn;\n\t\t}\n\n\t\tfail();\n\t});\n});\n\ndescribe('AzureResourceService.getTreeItem', function(): void {\n\tbeforeEach(() => {\n\t\tmockResourceTreeDataProvider1 = TypeMoq.Mock.ofType<azureResource.IAzureResourceTreeDataProvider>();\n\t\tmockResourceTreeDataProvider1.setup((o) => o.getChildren()).returns(() => Promise.resolve([TypeMoq.Mock.ofType<azureResource.IAzureResourceNode>().object]));\n\t\tmockResourceTreeDataProvider1.setup((o) => o.getChildren(TypeMoq.It.isAny())).returns(() => Promise.resolve([TypeMoq.Mock.ofType<azureResource.IAzureResourceNode>().object]));\n\t\tmockResourceTreeDataProvider1.setup((o) => o.getTreeItem(TypeMoq.It.isAny())).returns(() => Promise.resolve(TypeMoq.It.isAny()));\n\t\tmockResourceProvider1 = TypeMoq.Mock.ofType<azureResource.IAzureResourceProvider>();\n\t\tmockResourceProvider1.setup((o) => o.providerId).returns(() => 'mockResourceProvider1');\n\t\tmockResourceProvider1.setup((o) => o.getTreeDataProvider()).returns(() => mockResourceTreeDataProvider1.object);\n\n\t\tresourceService.clearResourceProviders();\n\t\tresourceService.registerResourceProvider(mockResourceProvider1.object);\n\t\tresourceService.areResourceProvidersLoaded = true;\n\t});\n\n\tit('Should be correct when provider id is correct.', async function(): Promise<void> {\n\t\tconst treeItem = await resourceService.getTreeItem(mockResourceProvider1.object.providerId, TypeMoq.It.isAny());\n\t\tshould(treeItem).Object();\n\t});\n\n\tit('Should throw exceptions when provider id is incorrect.', async function(): Promise<void> {\n\t\tconst providerId = 'non_existent_provider_id';\n\t\ttry {\n\t\t\tawait resourceService.getRootChildren(providerId, mockAccount, mockSubscription, mockTenantId);\n\t\t} catch (error) {\n\t\t\tshould(error.message).equal(`Azure resource provider doesn't exist. Id: ${providerId}`);\n\t\t\treturn;\n\t\t}\n\n\t\tfail();\n\t});\n});"]}