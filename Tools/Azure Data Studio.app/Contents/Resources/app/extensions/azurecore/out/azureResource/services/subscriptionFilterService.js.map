{"version":3,"file":"azureResource/services/subscriptionFilterService.js","sourceRoot":"../src","sources":["azureResource/services/subscriptionFilterService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,YAAY,CAAC;;;;;;;;;;AAEb,mCAAqE;AAUrE;IACC,YACC,YAAwC;QAsDjC,YAAO,GAA2B,SAAS,CAAC;QAC5C,kBAAa,GAA+B,SAAS,CAAC;QACtD,cAAS,GAAW,SAAS,CAAC;QAtDrC,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAElC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,uBAAuB,CAAC,CAAC;IAC1E,CAAC;IAEY,wBAAwB,CAAC,OAAgB;;YACrD,IAAI,qBAAqB,GAA8C,EAAE,CAAC;YAE1E,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAA0C,IAAI,CAAC,SAAS,CAAC,CAAC;YAC9F,IAAI,KAAK,EAAE;gBACV,qBAAqB,GAAG,KAAK,CAAC,qBAAqB,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;aAC3E;YAED,OAAO,qBAAqB,CAAC;QAC9B,CAAC;KAAA;IAEY,yBAAyB,CAAC,OAAgB,EAAE,qBAAgE;;YACxH,IAAI,0BAA0B,GAAsE,EAAE,CAAC;YAEvG,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAA0C,IAAI,CAAC,SAAS,CAAC,CAAC;YAC9F,IAAI,KAAK,EAAE;gBACV,0BAA0B,GAAG,KAAK,CAAC,qBAAqB,CAAC;aACzD;YAED,IAAI,CAAC,0BAA0B,EAAE;gBAChC,0BAA0B,GAAG,EAAE,CAAC;aAChC;YAED,0BAA0B,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,qBAAqB,CAAC;YAE1E,IAAI,CAAC,aAAa,CAAC,MAAM,CAA0C,IAAI,CAAC,SAAS,EAAE,EAAE,qBAAqB,EAAE,0BAA0B,EAAE,CAAC,CAAC;YAE1I,MAAM,OAAO,GAAa,EAAE,CAAC;YAC7B,KAAK,MAAM,SAAS,IAAI,0BAA0B,EAAE;gBACnD,OAAO,CAAC,IAAI,CAAC,GAAG,0BAA0B,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,GAAG,SAAS,IAAI,WAAW,CAAC,EAAE,IAAI,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;aAClI;YAED,MAAM,oBAAoB,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAW,sCAAsC,CAAC,gBAAgB,CAAC,CAAC;YACrH,IAAI,YAAY,GAAG,4BAAmB,CAAC,MAAM,CAAC;YAC9C,IAAI,oBAAoB,EAAE;gBACzB,IAAI,oBAAoB,CAAC,oBAAoB,EAAE;oBAC9C,YAAY,GAAG,4BAAmB,CAAC,eAAe,CAAC;iBACnD;qBAAM,IAAI,oBAAoB,CAAC,cAAc,EAAE;oBAC/C,YAAY,GAAG,4BAAmB,CAAC,SAAS,CAAC;iBAC7C;qBAAM,IAAI,oBAAoB,CAAC,WAAW,EAAE;oBAC5C,YAAY,GAAG,4BAAmB,CAAC,MAAM,CAAC;iBAC1C;aACD;YAED,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,sCAAsC,CAAC,gBAAgB,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;QAC3G,CAAC;KAAA;;AAMuB,uDAAgB,GAAG,8BAA8B,CAAC;AA5D3E,wFA6DC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport { WorkspaceConfiguration, ConfigurationTarget } from 'vscode';\nimport { Account } from 'sqlops';\n\nimport { azureResource } from '../azure-resource';\nimport { IAzureResourceSubscriptionFilterService, IAzureResourceCacheService } from '../interfaces';\n\ninterface AzureResourceSelectedSubscriptionsCache {\n\tselectedSubscriptions: { [accountId: string]: azureResource.AzureResourceSubscription[]};\n}\n\nexport class AzureResourceSubscriptionFilterService implements IAzureResourceSubscriptionFilterService {\n\tpublic constructor(\n\t\tcacheService: IAzureResourceCacheService\n\t) {\n\t\tthis._cacheService = cacheService;\n\n\t\tthis._cacheKey = this._cacheService.generateKey('selectedSubscriptions');\n\t}\n\n\tpublic async getSelectedSubscriptions(account: Account): Promise<azureResource.AzureResourceSubscription[]> {\n\t\tlet selectedSubscriptions: azureResource.AzureResourceSubscription[] = [];\n\n\t\tconst cache = this._cacheService.get<AzureResourceSelectedSubscriptionsCache>(this._cacheKey);\n\t\tif (cache) {\n\t\t\tselectedSubscriptions = cache.selectedSubscriptions[account.key.accountId];\n\t\t}\n\n\t\treturn selectedSubscriptions;\n\t}\n\n\tpublic async saveSelectedSubscriptions(account: Account, selectedSubscriptions: azureResource.AzureResourceSubscription[]): Promise<void> {\n\t\tlet selectedSubscriptionsCache: { [accountId: string]: azureResource.AzureResourceSubscription[]} = {};\n\n\t\tconst cache = this._cacheService.get<AzureResourceSelectedSubscriptionsCache>(this._cacheKey);\n\t\tif (cache) {\n\t\t\tselectedSubscriptionsCache = cache.selectedSubscriptions;\n\t\t}\n\n\t\tif (!selectedSubscriptionsCache) {\n\t\t\tselectedSubscriptionsCache = {};\n\t\t}\n\n\t\tselectedSubscriptionsCache[account.key.accountId] = selectedSubscriptions;\n\n\t\tthis._cacheService.update<AzureResourceSelectedSubscriptionsCache>(this._cacheKey, { selectedSubscriptions: selectedSubscriptionsCache });\n\n\t\tconst filters: string[] = [];\n\t\tfor (const accountId in selectedSubscriptionsCache) {\n\t\t\tfilters.push(...selectedSubscriptionsCache[accountId].map((subcription) => `${accountId}/${subcription.id}/${subcription.name}`));\n\t\t}\n\n\t\tconst resourceFilterConfig = this._config.inspect<string[]>(AzureResourceSubscriptionFilterService.filterConfigName);\n\t\tlet configTarget = ConfigurationTarget.Global;\n\t\tif (resourceFilterConfig) {\n\t\t\tif (resourceFilterConfig.workspaceFolderValue) {\n\t\t\t\tconfigTarget = ConfigurationTarget.WorkspaceFolder;\n\t\t\t} else if (resourceFilterConfig.workspaceValue) {\n\t\t\t\tconfigTarget = ConfigurationTarget.Workspace;\n\t\t\t} else if (resourceFilterConfig.globalValue) {\n\t\t\t\tconfigTarget = ConfigurationTarget.Global;\n\t\t\t}\n\t\t}\n\n\t\tawait this._config.update(AzureResourceSubscriptionFilterService.filterConfigName, filters, configTarget);\n\t}\n\n\tprivate _config: WorkspaceConfiguration = undefined;\n\tprivate _cacheService: IAzureResourceCacheService = undefined;\n\tprivate _cacheKey: string = undefined;\n\n\tprivate static readonly filterConfigName = 'azure.resource.config.filter';\n}\n"]}