{"version":3,"file":"test/azureResource/tree/accountTreeNode.test.js","sourceRoot":"../src","sources":["test/azureResource/tree/accountTreeNode.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport * as should from 'should';\nimport * as TypeMoq from 'typemoq';\nimport * as sqlops from 'sqlops';\nimport * as vscode from 'vscode';\nimport 'mocha';\nimport { TokenCredentials } from 'ms-rest';\nimport { AppContext } from '../../../appContext';\n\nimport { azureResource } from '../../../azureResource/azure-resource';\nimport {\n\tIAzureResourceCacheService,\n\tIAzureResourceSubscriptionService,\n\tIAzureResourceSubscriptionFilterService,\n\tIAzureResourceTenantService\n} from '../../../azureResource/interfaces';\nimport { IAzureResourceTreeChangeHandler } from '../../../azureResource/tree/treeChangeHandler';\nimport { AzureResourceAccountTreeNode } from '../../../azureResource/tree/accountTreeNode';\nimport { AzureResourceSubscriptionTreeNode } from '../../../azureResource/tree/subscriptionTreeNode';\nimport { AzureResourceItemType, AzureResourceServiceNames } from '../../../azureResource/constants';\nimport { AzureResourceMessageTreeNode } from '../../../azureResource/messageTreeNode';\nimport { ApiWrapper } from '../../../apiWrapper';\nimport { generateGuid } from '../../../azureResource/utils';\n\n// Mock services\nlet mockExtensionContext: TypeMoq.IMock<vscode.ExtensionContext>;\nlet mockApiWrapper: TypeMoq.IMock<ApiWrapper>;\nlet mockCacheService: TypeMoq.IMock<IAzureResourceCacheService>;\nlet mockSubscriptionService: TypeMoq.IMock<IAzureResourceSubscriptionService>;\nlet mockSubscriptionFilterService: TypeMoq.IMock<IAzureResourceSubscriptionFilterService>;\nlet mockTenantService: TypeMoq.IMock<IAzureResourceTenantService>;\nlet mockAppContext: AppContext;\n\nlet mockTreeChangeHandler: TypeMoq.IMock<IAzureResourceTreeChangeHandler>;\n\n// Mock test data\nconst mockTenantId = 'mock_tenant_id';\n\nconst mockAccount: sqlops.Account = {\n\tkey: {\n\t\taccountId: 'mock_account',\n\t\tproviderId: 'mock_provider'\n\t},\n\tdisplayInfo: {\n\t\tdisplayName: 'mock_account@test.com',\n\t\taccountType: 'Microsoft',\n\t\tcontextualDisplayName: 'test'\n\t},\n\tproperties: {\n\t\ttenants: [\n\t\t\t{\n\t\t\t\tid: mockTenantId\n\t\t\t}\n\t\t]\n\t},\n\tisStale: false\n};\n\nconst mockSubscription1: azureResource.AzureResourceSubscription = {\n\tid: 'mock_subscription_1',\n\tname: 'mock subscription 1'\n};\n\nconst mockSubscription2: azureResource.AzureResourceSubscription = {\n\tid: 'mock_subscription_2',\n\tname: 'mock subscription 2'\n};\n\nconst mockSubscriptions = [mockSubscription1, mockSubscription2];\n\nconst mockFilteredSubscriptions = [mockSubscription1];\n\nconst mockTokens = {};\nmockTokens[mockTenantId] = {\n\ttoken: 'mock_token',\n\ttokenType: 'Bearer'\n};\n\nconst mockCredential = new TokenCredentials(mockTokens[mockTenantId].token, mockTokens[mockTenantId].tokenType);\n\nlet mockSubscriptionCache: azureResource.AzureResourceSubscription[] = [];\n\ndescribe('AzureResourceAccountTreeNode.info', function(): void {\n\tbeforeEach(() => {\n\t\tmockExtensionContext = TypeMoq.Mock.ofType<vscode.ExtensionContext>();\n\t\tmockApiWrapper = TypeMoq.Mock.ofType<ApiWrapper>();\n\t\tmockCacheService = TypeMoq.Mock.ofType<IAzureResourceCacheService>();\n\t\tmockSubscriptionService = TypeMoq.Mock.ofType<IAzureResourceSubscriptionService>();\n\t\tmockSubscriptionFilterService = TypeMoq.Mock.ofType<IAzureResourceSubscriptionFilterService>();\n\t\tmockTenantService = TypeMoq.Mock.ofType<IAzureResourceTenantService>();\n\n\t\tmockTreeChangeHandler = TypeMoq.Mock.ofType<IAzureResourceTreeChangeHandler>();\n\n\t\tmockSubscriptionCache = [];\n\n\t\tmockAppContext = new AppContext(mockExtensionContext.object, mockApiWrapper.object);\n\t\tmockAppContext.registerService<IAzureResourceCacheService>(AzureResourceServiceNames.cacheService, mockCacheService.object);\n\t\tmockAppContext.registerService<IAzureResourceSubscriptionService>(AzureResourceServiceNames.subscriptionService, mockSubscriptionService.object);\n\t\tmockAppContext.registerService<IAzureResourceSubscriptionFilterService>(AzureResourceServiceNames.subscriptionFilterService, mockSubscriptionFilterService.object);\n\t\tmockAppContext.registerService<IAzureResourceTenantService>(AzureResourceServiceNames.tenantService, mockTenantService.object);\n\n\t\tmockApiWrapper.setup((o) => o.getSecurityToken(mockAccount, sqlops.AzureResource.ResourceManagement)).returns(() => Promise.resolve(mockTokens));\n\t\tmockCacheService.setup((o) => o.generateKey(TypeMoq.It.isAnyString())).returns(() => generateGuid());\n\t\tmockCacheService.setup((o) => o.get(TypeMoq.It.isAnyString())).returns(() => mockSubscriptionCache);\n\t\tmockCacheService.setup((o) => o.update(TypeMoq.It.isAnyString(), TypeMoq.It.isAny())).returns(() => mockSubscriptionCache = mockSubscriptions);\n\t\tmockTenantService.setup((o) => o.getTenantId(TypeMoq.It.isAny())).returns(() => Promise.resolve(mockTenantId));\n\t});\n\n\tit('Should be correct when created.', async function(): Promise<void> {\n\t\tconst accountTreeNode = new AzureResourceAccountTreeNode(mockAccount, mockAppContext, mockTreeChangeHandler.object);\n\n\t\tconst accountTreeNodeId = `account_${mockAccount.key.accountId}`;\n\t\tconst accountTreeNodeLabel = `${mockAccount.displayInfo.displayName} (${mockAccount.key.accountId})`;\n\n\t\tshould(accountTreeNode.nodePathValue).equal(accountTreeNodeId);\n\n\t\tconst treeItem = await accountTreeNode.getTreeItem();\n\t\tshould(treeItem.id).equal(accountTreeNodeId);\n\t\tshould(treeItem.label).equal(accountTreeNodeLabel);\n\t\tshould(treeItem.contextValue).equal(AzureResourceItemType.account);\n\t\tshould(treeItem.collapsibleState).equal(vscode.TreeItemCollapsibleState.Collapsed);\n\n\t\tconst nodeInfo = accountTreeNode.getNodeInfo();\n\t\tshould(nodeInfo.label).equal(accountTreeNodeLabel);\n\t\tshould(nodeInfo.isLeaf).false();\n\t\tshould(nodeInfo.nodeType).equal(AzureResourceItemType.account);\n\t\tshould(nodeInfo.iconType).equal(AzureResourceItemType.account);\n\t});\n\n\tit('Should be correct when there are subscriptions listed.', async function(): Promise<void> {\n\t\tmockSubscriptionService.setup((o) => o.getSubscriptions(mockAccount, mockCredential)).returns(() => Promise.resolve(mockSubscriptions));\n\t\tmockSubscriptionFilterService.setup((o) => o.getSelectedSubscriptions(mockAccount)).returns(() => Promise.resolve(undefined));\n\n\t\tconst accountTreeNodeLabel = `${mockAccount.displayInfo.displayName} (${mockAccount.key.accountId}) (${mockSubscriptions.length} / ${mockSubscriptions.length} subscriptions)`;\n\n\t\tconst accountTreeNode = new AzureResourceAccountTreeNode(mockAccount, mockAppContext, mockTreeChangeHandler.object);\n\n\t\tconst subscriptionNodes = await accountTreeNode.getChildren();\n\n\t\tshould(subscriptionNodes).Array();\n\t\tshould(subscriptionNodes.length).equal(mockSubscriptions.length);\n\n\t\tconst treeItem = await accountTreeNode.getTreeItem();\n\t\tshould(treeItem.label).equal(accountTreeNodeLabel);\n\n\t\tconst nodeInfo = accountTreeNode.getNodeInfo();\n\t\tshould(nodeInfo.label).equal(accountTreeNodeLabel);\n\t});\n\n\tit('Should be correct when there are subscriptions filtered.', async function(): Promise<void> {\n\t\tmockSubscriptionService.setup((o) => o.getSubscriptions(mockAccount, mockCredential)).returns(() => Promise.resolve(mockSubscriptions));\n\t\tmockSubscriptionFilterService.setup((o) => o.getSelectedSubscriptions(mockAccount)).returns(() => Promise.resolve(mockFilteredSubscriptions));\n\n\t\tconst accountTreeNodeLabel = `${mockAccount.displayInfo.displayName} (${mockAccount.key.accountId}) (${mockFilteredSubscriptions.length} / ${mockSubscriptions.length} subscriptions)`;\n\n\t\tconst accountTreeNode = new AzureResourceAccountTreeNode(mockAccount, mockAppContext, mockTreeChangeHandler.object);\n\n\t\tconst subscriptionNodes = await accountTreeNode.getChildren();\n\n\t\tshould(subscriptionNodes).Array();\n\t\tshould(subscriptionNodes.length).equal(mockFilteredSubscriptions.length);\n\n\t\tconst treeItem = await accountTreeNode.getTreeItem();\n\t\tshould(treeItem.label).equal(accountTreeNodeLabel);\n\n\t\tconst nodeInfo = accountTreeNode.getNodeInfo();\n\t\tshould(nodeInfo.label).equal(accountTreeNodeLabel);\n\t});\n});\n\ndescribe('AzureResourceAccountTreeNode.getChildren', function(): void {\n\tbeforeEach(() => {\n\t\tmockExtensionContext = TypeMoq.Mock.ofType<vscode.ExtensionContext>();\n\t\tmockApiWrapper = TypeMoq.Mock.ofType<ApiWrapper>();\n\t\tmockCacheService = TypeMoq.Mock.ofType<IAzureResourceCacheService>();\n\t\tmockSubscriptionService = TypeMoq.Mock.ofType<IAzureResourceSubscriptionService>();\n\t\tmockSubscriptionFilterService = TypeMoq.Mock.ofType<IAzureResourceSubscriptionFilterService>();\n\t\tmockTenantService = TypeMoq.Mock.ofType<IAzureResourceTenantService>();\n\n\t\tmockTreeChangeHandler = TypeMoq.Mock.ofType<IAzureResourceTreeChangeHandler>();\n\n\t\tmockSubscriptionCache = [];\n\n\t\tmockAppContext = new AppContext(mockExtensionContext.object, mockApiWrapper.object);\n\t\tmockAppContext.registerService<IAzureResourceCacheService>(AzureResourceServiceNames.cacheService, mockCacheService.object);\n\t\tmockAppContext.registerService<IAzureResourceSubscriptionService>(AzureResourceServiceNames.subscriptionService, mockSubscriptionService.object);\n\t\tmockAppContext.registerService<IAzureResourceSubscriptionFilterService>(AzureResourceServiceNames.subscriptionFilterService, mockSubscriptionFilterService.object);\n\t\tmockAppContext.registerService<IAzureResourceTenantService>(AzureResourceServiceNames.tenantService, mockTenantService.object);\n\n\t\tmockApiWrapper.setup((o) => o.getSecurityToken(mockAccount, sqlops.AzureResource.ResourceManagement)).returns(() => Promise.resolve(mockTokens));\n\t\tmockCacheService.setup((o) => o.generateKey(TypeMoq.It.isAnyString())).returns(() => generateGuid());\n\t\tmockCacheService.setup((o) => o.get(TypeMoq.It.isAnyString())).returns(() => mockSubscriptionCache);\n\t\tmockCacheService.setup((o) => o.update(TypeMoq.It.isAnyString(), TypeMoq.It.isAny())).returns(() => mockSubscriptionCache = mockSubscriptions);\n\t\tmockTenantService.setup((o) => o.getTenantId(TypeMoq.It.isAny())).returns(() => Promise.resolve(mockTenantId));\n\t});\n\n\tit('Should load subscriptions from scratch and update cache when it is clearing cache.', async function(): Promise<void> {\n\t\tmockSubscriptionService.setup((o) => o.getSubscriptions(mockAccount, mockCredential)).returns(() => Promise.resolve(mockSubscriptions));\n\t\tmockSubscriptionFilterService.setup((o) => o.getSelectedSubscriptions(mockAccount)).returns(() => Promise.resolve([]));\n\n\t\tconst accountTreeNode = new AzureResourceAccountTreeNode(mockAccount, mockAppContext, mockTreeChangeHandler.object);\n\n\t\tconst children = await accountTreeNode.getChildren();\n\n\t\tmockApiWrapper.verify((o) => o.getSecurityToken(mockAccount, sqlops.AzureResource.ResourceManagement), TypeMoq.Times.once());\n\t\tmockSubscriptionService.verify((o) => o.getSubscriptions(mockAccount, mockCredential), TypeMoq.Times.once());\n\t\tmockCacheService.verify((o) => o.get(TypeMoq.It.isAnyString()), TypeMoq.Times.exactly(0));\n\t\tmockCacheService.verify((o) => o.update(TypeMoq.It.isAnyString(), TypeMoq.It.isAny()), TypeMoq.Times.once());\n\t\tmockSubscriptionFilterService.verify((o) => o.getSelectedSubscriptions(mockAccount), TypeMoq.Times.once());\n\n\t\tmockTreeChangeHandler.verify((o) => o.notifyNodeChanged(accountTreeNode), TypeMoq.Times.once());\n\n\t\tshould(accountTreeNode.totalSubscriptionCount).equal(mockSubscriptions.length);\n\t\tshould(accountTreeNode.selectedSubscriptionCount).equal(mockSubscriptions.length);\n\t\tshould(accountTreeNode.isClearingCache).false();\n\n\t\tshould(children).Array();\n\t\tshould(children.length).equal(mockSubscriptions.length);\n\n\t\tshould(mockSubscriptionCache).deepEqual(mockSubscriptions);\n\n\t\tfor (let ix = 0; ix < mockSubscriptions.length; ix++) {\n\t\t\tconst child = children[ix];\n\t\t\tconst subscription = mockSubscriptions[ix];\n\n\t\t\tshould(child).instanceof(AzureResourceSubscriptionTreeNode);\n\t\t\tshould(child.nodePathValue).equal(`account_${mockAccount.key.accountId}.subscription_${subscription.id}.tenant_${mockTenantId}`);\n\t\t}\n\t});\n\n\tit('Should load subscriptions from cache when it is not clearing cache.', async function(): Promise<void> {\n\t\tmockSubscriptionService.setup((o) => o.getSubscriptions(mockAccount, mockCredential)).returns(() => Promise.resolve(mockSubscriptions));\n\t\tmockSubscriptionFilterService.setup((o) => o.getSelectedSubscriptions(mockAccount)).returns(() => Promise.resolve(undefined));\n\n\t\tconst accountTreeNode = new AzureResourceAccountTreeNode(mockAccount, mockAppContext, mockTreeChangeHandler.object);\n\n\t\tawait accountTreeNode.getChildren();\n\t\tconst children = await accountTreeNode.getChildren();\n\n\t\tmockApiWrapper.verify((o) => o.getSecurityToken(mockAccount, sqlops.AzureResource.ResourceManagement), TypeMoq.Times.once());\n\t\tmockSubscriptionService.verify((o) => o.getSubscriptions(mockAccount, mockCredential), TypeMoq.Times.once());\n\t\tmockCacheService.verify((o) => o.get(TypeMoq.It.isAnyString()), TypeMoq.Times.once());\n\t\tmockCacheService.verify((o) => o.update(TypeMoq.It.isAnyString(), TypeMoq.It.isAny()), TypeMoq.Times.once());\n\n\t\tshould(children.length).equal(mockSubscriptionCache.length);\n\n\t\tfor (let ix = 0; ix < mockSubscriptionCache.length; ix++) {\n\t\t\tshould(children[ix].nodePathValue).equal(`account_${mockAccount.key.accountId}.subscription_${mockSubscriptionCache[ix].id}.tenant_${mockTenantId}`);\n\t\t}\n\t});\n\n\tit('Should handle when there is no subscriptions.', async function(): Promise<void> {\n\t\tmockSubscriptionService.setup((o) => o.getSubscriptions(mockAccount, mockCredential)).returns(() => Promise.resolve(undefined));\n\n\t\tconst accountTreeNode = new AzureResourceAccountTreeNode(mockAccount, mockAppContext, mockTreeChangeHandler.object);\n\n\t\tconst children = await accountTreeNode.getChildren();\n\n\t\tshould(accountTreeNode.totalSubscriptionCount).equal(0);\n\n\t\tshould(children).Array();\n\t\tshould(children.length).equal(1);\n\t\tshould(children[0]).instanceof(AzureResourceMessageTreeNode);\n\t\tshould(children[0].nodePathValue).startWith('message_');\n\t\tshould(children[0].getNodeInfo().label).equal('No Subscriptions found.');\n\t});\n\n\tit('Should honor subscription filtering.', async function(): Promise<void> {\n\t\tmockSubscriptionService.setup((o) => o.getSubscriptions(mockAccount, mockCredential)).returns(() => Promise.resolve(mockSubscriptions));\n\t\tmockSubscriptionFilterService.setup((o) => o.getSelectedSubscriptions(mockAccount)).returns(() => Promise.resolve(mockFilteredSubscriptions));\n\n\t\tconst accountTreeNode = new AzureResourceAccountTreeNode(mockAccount, mockAppContext, mockTreeChangeHandler.object);\n\n\t\tconst children = await accountTreeNode.getChildren();\n\n\t\tmockSubscriptionFilterService.verify((o) => o.getSelectedSubscriptions(mockAccount), TypeMoq.Times.once());\n\n\t\tshould(accountTreeNode.selectedSubscriptionCount).equal(mockFilteredSubscriptions.length);\n\t\tshould(children.length).equal(mockFilteredSubscriptions.length);\n\n\t\tfor (let ix = 0; ix < mockFilteredSubscriptions.length; ix++) {\n\t\t\tshould(children[ix].nodePathValue).equal(`account_${mockAccount.key.accountId}.subscription_${mockFilteredSubscriptions[ix].id}.tenant_${mockTenantId}`);\n\t\t}\n\t});\n\n\tit('Should handle errors.', async function(): Promise<void> {\n\t\tmockSubscriptionService.setup((o) => o.getSubscriptions(mockAccount, mockCredential)).returns(() => Promise.resolve(mockSubscriptions));\n\n\t\tconst mockError = 'Test error';\n\t\tmockSubscriptionFilterService.setup((o) => o.getSelectedSubscriptions(mockAccount)).returns(() => { throw new Error(mockError); });\n\n\t\tconst accountTreeNode = new AzureResourceAccountTreeNode(mockAccount, mockAppContext, mockTreeChangeHandler.object);\n\n\t\tconst children = await accountTreeNode.getChildren();\n\n\t\tmockApiWrapper.verify((o) => o.getSecurityToken(mockAccount, sqlops.AzureResource.ResourceManagement), TypeMoq.Times.once());\n\t\tmockSubscriptionService.verify((o) => o.getSubscriptions(mockAccount, mockCredential), TypeMoq.Times.once());\n\t\tmockSubscriptionFilterService.verify((o) => o.getSelectedSubscriptions(mockAccount), TypeMoq.Times.once());\n\t\tmockCacheService.verify((o) => o.get(TypeMoq.It.isAnyString()), TypeMoq.Times.never());\n\t\tmockCacheService.verify((o) => o.update(TypeMoq.It.isAnyString(), TypeMoq.It.isAny()), TypeMoq.Times.once());\n\n\t\tshould(children).Array();\n\t\tshould(children.length).equal(1);\n\t\tshould(children[0]).instanceof(AzureResourceMessageTreeNode);\n\t\tshould(children[0].nodePathValue).startWith('message_');\n\t\tshould(children[0].getNodeInfo().label).equal(`Error: ${mockError}`);\n\t});\n});\n\ndescribe('AzureResourceAccountTreeNode.clearCache', function() : void {\n\tbeforeEach(() => {\n\t\tmockExtensionContext = TypeMoq.Mock.ofType<vscode.ExtensionContext>();\n\t\tmockApiWrapper = TypeMoq.Mock.ofType<ApiWrapper>();\n\t\tmockCacheService = TypeMoq.Mock.ofType<IAzureResourceCacheService>();\n\t\tmockSubscriptionService = TypeMoq.Mock.ofType<IAzureResourceSubscriptionService>();\n\t\tmockSubscriptionFilterService = TypeMoq.Mock.ofType<IAzureResourceSubscriptionFilterService>();\n\t\tmockTenantService = TypeMoq.Mock.ofType<IAzureResourceTenantService>();\n\n\t\tmockTreeChangeHandler = TypeMoq.Mock.ofType<IAzureResourceTreeChangeHandler>();\n\n\t\tmockSubscriptionCache = [];\n\n\t\tmockAppContext = new AppContext(mockExtensionContext.object, mockApiWrapper.object);\n\t\tmockAppContext.registerService<IAzureResourceCacheService>(AzureResourceServiceNames.cacheService, mockCacheService.object);\n\t\tmockAppContext.registerService<IAzureResourceSubscriptionService>(AzureResourceServiceNames.subscriptionService, mockSubscriptionService.object);\n\t\tmockAppContext.registerService<IAzureResourceSubscriptionFilterService>(AzureResourceServiceNames.subscriptionFilterService, mockSubscriptionFilterService.object);\n\t\tmockAppContext.registerService<IAzureResourceTenantService>(AzureResourceServiceNames.tenantService, mockTenantService.object);\n\n\t\tmockApiWrapper.setup((o) => o.getSecurityToken(mockAccount, sqlops.AzureResource.ResourceManagement)).returns(() => Promise.resolve(mockTokens));\n\t\tmockCacheService.setup((o) => o.generateKey(TypeMoq.It.isAnyString())).returns(() => generateGuid());\n\t\tmockCacheService.setup((o) => o.get(TypeMoq.It.isAnyString())).returns(() => mockSubscriptionCache);\n\t\tmockCacheService.setup((o) => o.update(TypeMoq.It.isAnyString(), TypeMoq.It.isAny())).returns(() => mockSubscriptionCache = mockSubscriptions);\n\t\tmockTenantService.setup((o) => o.getTenantId(TypeMoq.It.isAny())).returns(() => Promise.resolve(mockTenantId));\n\t});\n\n\tit('Should clear cache.', async function(): Promise<void> {\n\t\tconst accountTreeNode = new AzureResourceAccountTreeNode(mockAccount, mockAppContext, mockTreeChangeHandler.object);\n\t\taccountTreeNode.clearCache();\n\t\tshould(accountTreeNode.isClearingCache).true();\n\t});\n});"]}