{"version":3,"file":"test/azureResource/providers/databaseServer/databaseServerTreeDataProvider.test.js","sourceRoot":"../src","sources":["test/azureResource/providers/databaseServer/databaseServerTreeDataProvider.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport * as should from 'should';\nimport * as TypeMoq from 'typemoq';\nimport * as sqlops from 'sqlops';\nimport * as vscode from 'vscode';\nimport 'mocha';\n\nimport { azureResource } from '../../../../azureResource/azure-resource';\nimport { ApiWrapper } from '../../../../apiWrapper';\nimport { IAzureResourceDatabaseServerService } from '../../../../azureResource/providers/databaseServer/interfaces';\nimport { AzureResourceDatabaseServerTreeDataProvider } from '../../../../azureResource/providers/databaseServer/databaseServerTreeDataProvider';\nimport { AzureResourceDatabaseServer } from '../../../../azureResource/providers/databaseServer/models';\nimport { AzureResourceItemType } from '../../../../azureResource/constants';\n\n// Mock services\nlet mockDatabaseServerService: TypeMoq.IMock<IAzureResourceDatabaseServerService>;\nlet mockApiWrapper: TypeMoq.IMock<ApiWrapper>;\nlet mockExtensionContext: TypeMoq.IMock<vscode.ExtensionContext>;\n\n// Mock test data\nconst mockAccount: sqlops.Account = {\n\tkey: {\n\t\taccountId: 'mock_account',\n\t\tproviderId: 'mock_provider'\n\t},\n\tdisplayInfo: {\n\t\tdisplayName: 'mock_account@test.com',\n\t\taccountType: 'Microsoft',\n\t\tcontextualDisplayName: 'test'\n\t},\n\tproperties: undefined,\n\tisStale: false\n};\n\nconst mockSubscription: azureResource.AzureResourceSubscription = {\n\tid: 'mock_subscription',\n\tname: 'mock subscription'\n};\n\nconst mockTenantId: string = 'mock_tenant';\n\nconst mockResourceRootNode: azureResource.IAzureResourceNode = {\n\taccount: mockAccount,\n\tsubscription: mockSubscription,\n\ttenantId: mockTenantId,\n\ttreeItem: {\n\t\tid: 'mock_resource_root_node',\n\t\tlabel: 'mock resource root node',\n\t\ticonPath: undefined,\n\t\tcollapsibleState: vscode.TreeItemCollapsibleState.Collapsed,\n\t\tcontextValue: 'mock_resource_root_node'\n\t}\n};\n\nconst mockTokens = {};\nmockTokens[mockTenantId] = {\n\ttoken: 'mock_token',\n\ttokenType: 'Bearer'\n};\n\nconst mockDatabaseServers: AzureResourceDatabaseServer[] = [\n\t{\n\t\tname: 'mock database server 1',\n\t\tfullName: 'mock database server full name 1',\n\t\tloginName: 'mock login',\n\t\tdefaultDatabaseName: 'master'\n\t},\n\t{\n\t\tname: 'mock database server 2',\n\t\tfullName: 'mock database server full name 2',\n\t\tloginName: 'mock login',\n\t\tdefaultDatabaseName: 'master'\n\t}\n];\n\ndescribe('AzureResourceDatabaseServerTreeDataProvider.info', function(): void {\n\tbeforeEach(() => {\n\t\tmockDatabaseServerService = TypeMoq.Mock.ofType<IAzureResourceDatabaseServerService>();\n\t\tmockApiWrapper = TypeMoq.Mock.ofType<ApiWrapper>();\n\t\tmockExtensionContext = TypeMoq.Mock.ofType<vscode.ExtensionContext>();\n\t});\n\n\tit('Should be correct when created.', async function(): Promise<void> {\n\t\tconst treeDataProvider = new AzureResourceDatabaseServerTreeDataProvider(mockDatabaseServerService.object, mockApiWrapper.object, mockExtensionContext.object);\n\n\t\tconst treeItem = await treeDataProvider.getTreeItem(mockResourceRootNode);\n\t\tshould(treeItem.id).equal(mockResourceRootNode.treeItem.id);\n\t\tshould(treeItem.label).equal(mockResourceRootNode.treeItem.label);\n\t\tshould(treeItem.collapsibleState).equal(mockResourceRootNode.treeItem.collapsibleState);\n\t\tshould(treeItem.contextValue).equal(mockResourceRootNode.treeItem.contextValue);\n\t});\n});\n\ndescribe('AzureResourceDatabaseServerTreeDataProvider.getChildren', function(): void {\n\tbeforeEach(() => {\n\t\tmockDatabaseServerService = TypeMoq.Mock.ofType<IAzureResourceDatabaseServerService>();\n\t\tmockApiWrapper = TypeMoq.Mock.ofType<ApiWrapper>();\n\t\tmockExtensionContext = TypeMoq.Mock.ofType<vscode.ExtensionContext>();\n\n\t\tmockApiWrapper.setup((o) => o.getSecurityToken(mockAccount, sqlops.AzureResource.ResourceManagement)).returns(() => Promise.resolve(mockTokens));\n\t\tmockDatabaseServerService.setup((o) => o.getDatabaseServers(mockSubscription, TypeMoq.It.isAny())).returns(() => Promise.resolve(mockDatabaseServers));\n\t\tmockExtensionContext.setup((o) => o.asAbsolutePath(TypeMoq.It.isAnyString())).returns(() => TypeMoq.It.isAnyString());\n\t});\n\n\tit('Should return container node when element is undefined.', async function(): Promise<void> {\n\t\tconst treeDataProvider = new AzureResourceDatabaseServerTreeDataProvider(mockDatabaseServerService.object, mockApiWrapper.object, mockExtensionContext.object);\n\n\t\tconst children = await treeDataProvider.getChildren();\n\n\t\tshould(children).Array();\n\t\tshould(children.length).equal(1);\n\n\t\tconst child = children[0];\n\t\tshould(child.account).undefined();\n\t\tshould(child.subscription).undefined();\n\t\tshould(child.tenantId).undefined();\n\t\tshould(child.treeItem.id).equal('azure.resource.providers.databaseServer.treeDataProvider.databaseServerContainer');\n\t\tshould(child.treeItem.label).equal('SQL Servers');\n\t\tshould(child.treeItem.collapsibleState).equal(vscode.TreeItemCollapsibleState.Collapsed);\n\t\tshould(child.treeItem.contextValue).equal('azure.resource.itemType.databaseServerContainer');\n\t});\n\n\tit('Should return resource nodes when it is container node.', async function(): Promise<void> {\n\t\tconst treeDataProvider = new AzureResourceDatabaseServerTreeDataProvider(mockDatabaseServerService.object, mockApiWrapper.object, mockExtensionContext.object);\n\n\t\tconst children = await treeDataProvider.getChildren(mockResourceRootNode);\n\n\t\tshould(children).Array();\n\t\tshould(children.length).equal(mockDatabaseServers.length);\n\n\t\tfor (let ix = 0; ix < children.length; ix++) {\n\t\t\tconst child = children[ix];\n\t\t\tconst databaseServer = mockDatabaseServers[ix];\n\n\t\t\tshould(child.account).equal(mockAccount);\n\t\t\tshould(child.subscription).equal(mockSubscription);\n\t\t\tshould(child.tenantId).equal(mockTenantId);\n\t\t\tshould(child.treeItem.id).equal(`databaseServer_${databaseServer.name}`);\n\t\t\tshould(child.treeItem.label).equal(databaseServer.name);\n\t\t\tshould(child.treeItem.collapsibleState).equal(vscode.TreeItemCollapsibleState.None);\n\t\t\tshould(child.treeItem.contextValue).equal(AzureResourceItemType.databaseServer);\n\t\t}\n\t});\n});\n"]}